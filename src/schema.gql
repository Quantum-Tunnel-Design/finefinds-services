# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AdminAccountInput {
  email: String!
  firstName: String!
  lastName: String!
  password: String!
}

input AdminSignInInput {
  password: String!
  username: String!
}

type AgeGroup {
  id: ID!
  name: String
}

type AuthResponse {
  accessToken: String
  idToken: String
  message: String
  refreshToken: String
  user: User
}

type BookingDetailsDto {
  bookedDate: String!
  bookedTimeSlot: String!
  bookingId: ID!
  bookingStatus: BookingStatus!
  children: [ChildBookingDetailDto!]!
  classPackageId: ID!
  classPackageName: String!
  numberOfChildrenBooked: Float!
  parentEmail: String!
  parentName: String!
  parentPhoneNumber: String!
  paymentType: PaymentType!
}

input BookingFilterInput {
  classPackageId: ID
  endDate: String
  startDate: String
}

enum BookingStatus {
  CANCELLED
  PAID
  RESCHEDULED
}

input BulkCreateVendorsInput {
  vendors: [VendorSignUpInput!]!
}

type BusinessProfile {
  accountNumber: String
  bankName: String
  branch: String
  businessName: String!
  categories: [String!]!
  contactNumber: String!
  coverImageUrl: String
  createdAt: DateTime!
  description: String!
  facebookUrl: String
  galleryUrls: [String!]
  id: ID!
  instagramUrl: String
  location: String!
  logoUrl: String
  tags: [String!]!
  twitterUrl: String
  updatedAt: DateTime!
  user: User
  userId: String!
  website: String
}

enum CancellationPolicyType {
  FIXED_COMMITMENT
  FLEXIBLE_RESCHEDULING
}

type Category {
  id: ID!
  name: String
}

type Child {
  createdAt: DateTime!
  dateOfBirth: DateTime!
  firstName: String!
  gender: Gender!
  id: ID!
  lastName: String!
  parentId: ID!
  updatedAt: DateTime!
}

type ChildBookingDetailDto {
  dateOfBirth: DateTime!
  firstName: String!
  lastName: String!
}

input ChildInput {
  dateOfBirth: DateTime!
  firstName: String!
  gender: String!
  lastName: String!
}

type ClassPackage {
  ageGroups: [AgeGroup!]!
  beforeYouComeInstructions: String
  cancellationPolicyType: CancellationPolicyType!
  category: Category!
  categoryId: ID!
  coverImageUrl: String
  createdAt: DateTime!
  description: String
  id: ID!
  name: String!
  pricePerChild: Float!
  rescheduleDaysBefore: Float
  scheduleSlots: [ScheduleSlot]
  status: ClassPackageStatus!
  tags: [String]
  updatedAt: DateTime!
  vendor: User!
  vendorId: ID!
}

enum ClassPackageStatus {
  ARCHIVED
  DRAFT
  PUBLISHED
}

input ConfirmSignUpInput {
  code: String!
  email: String!
}

input CreateBusinessProfileInput {
  accountNumber: String
  bankName: String
  branch: String
  businessName: String!
  categories: [String!]!
  contactNumber: String!
  coverImageUrl: String
  description: String!
  facebookUrl: String
  galleryUrls: [String!]
  instagramUrl: String
  location: String!
  logoUrl: String
  tags: [String!]!
  twitterUrl: String
  website: String
}

input CreateChildInput {
  dateOfBirth: DateTime!
  firstName: String!
  gender: Gender!
  lastName: String!
}

input CreateClassPackageInput {
  ageGroupIds: [ID!]!
  beforeYouComeInstructions: String!
  cancellationPolicyType: String!
  categoryId: ID!
  coverImageUrl: String
  customDatesInput: CustomDatesRecurrenceInput
  dailyRecurrenceInput: DailyRecurrenceInput
  description: String!
  name: String!
  pricePerChild: Float!
  rescheduleDaysBefore: Int
  schedulingType: SchedulingType!
  status: String
  tags: [String!]!
  weeklyRecurrenceInput: WeeklyRecurrenceInput
}

input CreateNotificationInput {
  message: String!
  type: String!
}

input CreateVendorProfileDto {
  description: String!
  instituteName: String!
  phoneNumber: String
  website: String
}

input CustomDateSlotInput {
  availableSlots: Int!
  date: DateTime!
  endTime: DateTime!
  startTime: DateTime!
}

input CustomDatesRecurrenceInput {
  slots: [CustomDateSlotInput!]!
}

input DailyRecurrenceInput {
  availableSlotsPerOccurrence: Int!
  recurrenceEndDate: DateTime
  recurrenceStartDate: DateTime!
  slotEndTime: DateTime!
  slotStartTime: DateTime!
}

input DateRangeFilterDto {
  endDate: String
  startDate: String
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"""Represents a day of the week."""
enum DayOfWeek {
  FRIDAY
  MONDAY
  SATURDAY
  SUNDAY
  THURSDAY
  TUESDAY
  WEDNESDAY
}

input DeleteBusinessProfileInput {
  confirmation: String!
}

input ForgotPasswordInput {
  email: String!
}

"""Gender of a child or user"""
enum Gender {
  FEMALE
  MALE
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type MonthlyPaymentDataDto {
  month: String!
  totalAmount: Float!
}

type Mutation {
  """
  Adds a new child to the authenticated parent's profile. Restricted to PARENT role.
  """
  addChild(input: CreateChildInput!): Child!

  """Authenticates an admin user and returns an access token."""
  adminSignIn(input: AdminSignInInput!): AuthResponse!

  """Approves a vendor profile. Requires ADMIN privileges."""
  approveVendor(
    """The ID of the vendor to approve."""
    vendorId: String!
  ): VendorProfile!

  """Creates multiple vendor accounts in bulk. Requires ADMIN privileges."""
  bulkCreateVendors(input: BulkCreateVendorsInput!): AuthResponse!

  """
  Confirms a user's registration using the verification code sent to their email.
  """
  confirmSignUp(input: ConfirmSignUpInput!): AuthResponse!

  """Creates a new admin account. Requires ADMIN privileges."""
  createAdminAccount(input: AdminAccountInput!): AuthResponse!

  """
  Creates a new business profile for the authenticated vendor. Requires VENDOR role.
  """
  createMyBusinessProfile(input: CreateBusinessProfileInput!): BusinessProfile!

  """
  Creates a new class package for the currently authenticated vendor. Cover image URL can be optionally provided if already uploaded elsewhere.
  """
  createMyClassPackage(input: CreateClassPackageInput!): ClassPackage!

  """Creates a new notification for the currently authenticated user."""
  createNotification(input: CreateNotificationInput!): Notification!

  """
  Deletes a child's profile for the authenticated parent. Restricted to PARENT role.
  """
  deleteChild(childId: ID!): OperationStatusDto!

  """
  Deletes the business profile of the currently authenticated vendor. This also archives associated classes. Cannot be undone.
  """
  deleteMyBusinessProfile(
    """Confirmation input for deleting the business profile."""
    input: DeleteBusinessProfileInput!
  ): OperationStatusDto!

  """
  Deletes a class package owned by the currently authenticated vendor. This operation cannot be undone.
  """
  deleteMyClassPackage(
    """The ID of the class package to delete."""
    id: ID!
  ): OperationStatusDto!

  """
  Initiates the password reset process by sending a reset code to the user's email.
  """
  forgotPassword(input: ForgotPasswordInput!): OperationStatusDto!

  """
  Logs out the currently authenticated user and invalidates their session.
  """
  logout: OperationStatusDto!

  """Marks a notification as read for the currently authenticated user."""
  markNotificationAsRead(id: String!): Notification!

  """Registers a new parent account in the system."""
  parentSignUp(input: ParentSignUpInput!): AuthResponse!

  """Creates or updates the profile for the currently authenticated vendor."""
  registerVendorProfile(
    """Data for creating the vendor profile."""
    input: CreateVendorProfileDto!
  ): VendorProfile!

  """Resets an admin user's password. Requires ADMIN privileges."""
  resetAdminPassword(input: ResetAdminPasswordInput!): AuthResponse!

  """
  Resets a user's password using the verification code sent to their email.
  """
  resetPassword(input: ResetPasswordInput!): OperationStatusDto!

  """Authenticates a user and returns an access token."""
  signIn(input: SignInInput!): AuthResponse!

  """Registers a new student account in the system."""
  signUp(input: SignUpInput!): AuthResponse!

  """
  Updates a child's information for the authenticated parent. Restricted to PARENT role.
  """
  updateChild(childId: ID!, input: UpdateChildInput!): Child!

  """
  Updates the business profile for the authenticated vendor. Requires VENDOR role.
  """
  updateMyBusinessProfile(input: UpdateBusinessProfileInput!): BusinessProfile!

  """
  Updates an existing class package for the currently authenticated vendor. Cover image URL can be optionally provided or set to null to remove.
  """
  updateMyClassPackage(
    """The ID of the class package to update."""
    id: ID!
    input: UpdateClassPackageInput!
  ): ClassPackage!

  """Updates the password of the currently authenticated parent user."""
  updateMyParentPassword(input: UpdateParentPasswordInput!): OperationStatusDto!

  """Updates the profile of the currently authenticated parent user."""
  updateMyParentProfile(input: UpdateParentProfileInput!): User!

  """
  Updates the profile of the currently authenticated user. (Generic - parent-specific update is in AuthResolver)
  """
  updateMyProfile(
    """The data to update for the user profile."""
    input: UpdateUserDto!
  ): User!

  """Updates the profile for the currently authenticated vendor."""
  updateVendorProfile(
    """Data for updating the vendor profile."""
    input: UpdateVendorProfileDto!
  ): VendorProfile!

  """Authenticates a vendor and returns an access token."""
  vendorLogin(input: VendorLoginInput!): AuthResponse!

  """Registers a new vendor account in the system."""
  vendorSignUp(input: VendorSignUpInput!): AuthResponse!
}

type Notification {
  createdAt: DateTime!
  data: JSON!
  id: String!
  message: String!
  read: Boolean!
  title: String!
  type: String!
  updatedAt: DateTime!
  userId: String!
}

type OperationStatusDto {
  message: String
  success: Boolean!
}

type ParentBookingDetailsDto {
  bookedDate: String!
  bookedTimeSlot: String!
  bookingId: ID!
  bookingStatus: BookingStatus!
  classPackageId: ID!
  classPackageName: String!
  enrolledChildren: [ChildBookingDetailDto!]!
  location: String
  paymentType: PaymentType!
  scheduleSlotId: ID!
  vendorId: ID!
  vendorName: String!
}

enum ParentBookingType {
  PAST
  UPCOMING
}

input ParentSignUpInput {
  children: [ChildInput!]!
  confirmPassword: String!
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  phoneNumber: String!
}

"""The status of a payment."""
enum PaymentStatus {
  COMPLETED
  FAILED
  PENDING
  REFUNDED
}

enum PaymentType {
  CARD
}

type Query {
  """
  Retrieves a single class package by its ID. If the authenticated user is a vendor, it ensures the package belongs to them.
  """
  classPackage(
    """The ID of the class package to retrieve."""
    id: ID!
  ): ClassPackage

  """
  Retrieves a specific child by ID for the authenticated parent. Restricted to PARENT role.
  """
  getChild(childId: ID!): Child

  """
  Retrieves the business profile of the currently authenticated vendor. Requires VENDOR role.
  """
  getMyBusinessProfile: BusinessProfile

  """
  Retrieves all children for the authenticated parent. Restricted to PARENT role.
  """
  listChildren: [Child!]!

  """
  Retrieves a list of users. (Placeholder - typically admin-only and with pagination/filtering)
  """
  listUsers: [User!]!

  """Lists all vendor profiles. Requires ADMIN privileges."""
  listVendors: [VendorProfile!]!

  """
  Retrieves the profile of the currently authenticated user. (Alias for AuthResolver.me)
  """
  me: User!

  """
  Retrieves all class packages created by the currently authenticated vendor.
  """
  myClassPackages: [ClassPackage!]!

  """Retrieves all notifications for the currently authenticated user."""
  myNotifications: [Notification!]!

  """
  Retrieves all bookings for the currently authenticated parent. Can be filtered by type (upcoming or past bookings).
  """
  myParentBookings(
    """Specifies whether to fetch 'upcoming' or 'past' bookings."""
    type: ParentBookingType!
  ): [ParentBookingDetailsDto!]!

  """
  Retrieves the transaction history for the currently authenticated parent user.
  """
  myTransactionHistory: [TransactionViewDto!]!

  """
  Retrieves all bookings associated with the currently authenticated vendor. Supports filtering by class package ID and date range.
  """
  myVendorBookings(
    """Optional filters for class package ID, start date, and end date."""
    filters: BookingFilterInput
  ): [BookingDetailsDto!]!

  """
  Retrieves dashboard data, including revenue metrics, for the currently authenticated vendor. Supports date range filtering.
  """
  myVendorDashboardRevenue(
    """Optional date range (startDate, endDate) to filter revenue data."""
    filters: DateRangeFilterDto
  ): VendorDashboardDataDto!

  """Retrieves the profile of the currently authenticated vendor."""
  myVendorProfile: VendorProfile!
}

input ResetAdminPasswordInput {
  email: String!
  newPassword: String!
}

input ResetPasswordInput {
  code: String!
  confirmNewPassword: String!
  email: String!
  newPassword: String!
}

type ScheduleSlot {
  availableSlots: Float!
  endTime: DateTime!
  id: ID!
  startTime: DateTime!
}

"""Defines the type of scheduling for a class package."""
enum SchedulingType {
  CUSTOM_DATES
  DAILY
  FIXED_SLOTS
  WEEKLY
}

input SignInInput {
  email: String!
  password: String!
  rememberMe: Boolean! = false
}

input SignUpInput {
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  role: UserRole!
}

type TransactionViewDto {
  className: String!
  classPackageId: ID!
  id: ID!
  paymentAmount: Float!
  paymentDate: DateTime!
  paymentMethod: String
  paymentStatus: PaymentStatus!
  scheduleDetails: String
  transactionId: String
  vendorName: String!
}

input UpdateBusinessProfileInput {
  accountNumber: String
  bankName: String
  branch: String
  businessName: String
  categories: [String!]
  contactNumber: String
  coverImageUrl: String
  description: String
  facebookUrl: String
  galleryUrls: [String!]
  instagramUrl: String
  location: String
  logoUrl: String
  tags: [String!]
  twitterUrl: String
  website: String
}

input UpdateChildInput {
  dateOfBirth: DateTime
  firstName: String
  gender: Gender
  lastName: String
}

input UpdateClassPackageInput {
  ageGroupIds: [ID!]
  beforeYouComeInstructions: String
  cancellationPolicyType: String
  categoryId: ID
  coverImageUrl: String
  customDatesInput: CustomDatesRecurrenceInput
  dailyRecurrenceInput: DailyRecurrenceInput
  description: String
  name: String
  pricePerChild: Float
  rescheduleDaysBefore: Int
  schedulingType: SchedulingType
  status: String
  tags: [String!]
  weeklyRecurrenceInput: WeeklyRecurrenceInput
}

input UpdateParentPasswordInput {
  confirmNewPassword: String!
  currentPassword: String!
  newPassword: String!
}

input UpdateParentProfileInput {
  firstName: String!
  lastName: String!
  phoneNumber: String!
}

input UpdateUserDto {
  avatarUrl: String
  name: String
}

input UpdateVendorProfileDto {
  description: String
  instituteName: String
  phoneNumber: String
  website: String
}

type User {
  avatarUrl: String
  cognitoSub: String!
  createdAt: DateTime!
  email: String!
  firstName: String!
  id: String!
  lastName: String!
  phoneNumber: String
  role: String!
  updatedAt: DateTime!
}

enum UserRole {
  ADMIN
  PARENT
  STUDENT
  VENDOR
}

type VendorDashboardDataDto {
  metrics: VendorRevenueMetricsDto!
  monthlyPayments: [MonthlyPaymentDataDto!]!
}

input VendorLoginInput {
  email: String!
  password: String!
}

type VendorProfile {
  approved: Boolean!
  createdAt: DateTime!
  description: String!
  id: ID!
  instituteName: String!
  phoneNumber: String
  updatedAt: DateTime!
  user: User
  website: String
}

type VendorRevenueMetricsDto {
  pendingPayoutToDate: Float!
  totalPaymentsInRange: Float!
}

input VendorSignUpInput {
  confirmPassword: String!
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  phoneNumber: String!
  secondaryPhoneNumber: String!
  termsAccepted: Boolean!
}

input WeeklyRecurrenceInput {
  availableSlotsPerOccurrence: Int!
  daysOfWeek: [DayOfWeek!]!
  recurrenceEndDate: DateTime
  recurrenceStartDate: DateTime!
  slotEndTime: DateTime!
  slotStartTime: DateTime!
}