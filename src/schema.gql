# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AdminAccountInput {
  email: String!
  firstName: String!
  lastName: String!
  password: String!
}

"""
Basic information about a class package for admin views (e.g., under vendor details).
"""
type AdminClassPackageBasicInfo {
  """Timestamp when the class package was created."""
  createdAt: DateTime!

  """Unique identifier of the class package."""
  id: ID!

  """Name of the class package."""
  name: String!

  """Price per child for the class package."""
  pricePerChild: Float!

  """Current status of the class package (e.g., DRAFT, PUBLISHED)."""
  status: ClassPackageStatus!

  """Timestamp when the class package was last updated."""
  updatedAt: DateTime!
}

type AdminDashboardDataDto {
  metrics: DashboardMetricsDto!
  monthlyPayments: [MonthlyPaymentDataDto!]!
}

"""
Basic information about a class package enrollment for admin views (e.g., under parent details).
"""
type AdminPackageEnrollmentBasicInfo {
  """Timestamp when the booking was made."""
  bookedAt: DateTime!

  """Current status of the booking (e.g., PAID, CANCELLED)."""
  bookingStatus: BookingStatus!

  """Identifier of the enrolled class package."""
  classPackageId: ID!

  """Name of the enrolled class package."""
  classPackageName: String!

  """Unique identifier of the enrollment record."""
  enrollmentId: ID!

  """Identifier of the vendor for this class package."""
  vendorId: ID!

  """Name of the vendor (business name or full name)."""
  vendorName: String!
}

input AdminSignInInput {
  password: String!
  username: String!
}

"""View model for listing transactions in the admin panel."""
type AdminTransactionListView {
  """Amount of the transaction."""
  amount: Float!

  """Identifier of the class package related to this transaction."""
  classPackageId: ID!

  """Name of the class package."""
  classPackageName: String!

  """Transaction ID from the payment gateway, if available."""
  gatewayTransactionId: String

  """Internal unique identifier of the payment record."""
  id: ID!

  """Identifier of the parent who made the payment."""
  parentId: ID!

  """Full name of the parent who made the payment."""
  parentName: String!

  """Date and time when the payment was recorded."""
  paymentDate: DateTime!

  """Method used for the payment (e.g., card, PayPal)."""
  paymentMethod: String

  """Current status of the payment (e.g., PENDING, COMPLETED, FAILED)."""
  status: PaymentStatus!

  """Identifier of the vendor associated with the transaction."""
  vendorId: ID!

  """Name of the vendor (business name or full name)."""
  vendorName: String!
}

"""Input for updating a user's active or soft-deleted status by an admin."""
input AdminUpdateUserStatusInput {
  """Set to true to make the user account active, false to deactivate."""
  isActive: Boolean

  """
  Set to true to soft-delete the user, or false to restore a soft-deleted user. Does not perform a hard delete.
  """
  setDeleted: Boolean
}

"""
Detailed view of a user for admin panel, including role-specific information.
"""
type AdminUserDetails {
  """
  Business profile of the user, if the user is a VENDOR and has a profile.
  """
  businessProfile: BusinessProfile

  """
  Children of the user, if the user is a PARENT. Includes child's details.
  """
  children: [Child!]

  """Timestamp when the user was created."""
  createdAt: DateTime!

  """Class packages created by the user, if the user is a VENDOR."""
  createdPackages: [AdminClassPackageBasicInfo!]

  """Timestamp when the user was soft-deleted. Null if not deleted."""
  deletedAt: DateTime

  """User's email address."""
  email: String!

  """Packages the user has enrolled in, if the user is a PARENT."""
  enrolledPackages: [AdminPackageEnrollmentBasicInfo!]

  """User's first name."""
  firstName: String!

  """Unique identifier of the user."""
  id: ID!

  """Indicates if the user account is currently active."""
  isActive: Boolean!

  """User's last name."""
  lastName: String!

  """Role of the user in the system."""
  role: UserRole!

  """Timestamp when the user was last updated."""
  updatedAt: DateTime!

  """
  Vendor-specific profile details, if the user is a VENDOR and has a profile.
  """
  vendorProfile: VendorProfile
}

"""Basic view of a user for admin lists."""
type AdminUserView {
  """Timestamp when the user was created."""
  createdAt: DateTime!

  """Timestamp when the user was soft-deleted. Null if not deleted."""
  deletedAt: DateTime

  """User's email address."""
  email: String!

  """User's first name."""
  firstName: String!

  """Unique identifier of the user."""
  id: ID!

  """Indicates if the user account is currently active."""
  isActive: Boolean!

  """User's last name."""
  lastName: String!

  """Role of the user in the system."""
  role: UserRole!

  """Timestamp when the user was last updated."""
  updatedAt: DateTime!
}

type AgeGroup {
  id: ID!
  name: String
}

type AuthResponse {
  idToken: String
  message: String
  refreshToken: String
  user: User
}

type BookingDetailsDto {
  bookedDate: String!
  bookedTimeSlot: String!
  bookingId: ID!
  bookingStatus: BookingStatus!
  children: [ChildBookingDetailDto!]!
  classPackageId: ID!
  classPackageName: String!
  numberOfChildrenBooked: Float!
  parentEmail: String!
  parentName: String!
  parentPhoneNumber: String!
  paymentType: PaymentType!
}

input BookingFilterInput {
  classPackageId: ID
  endDate: String
  startDate: String
}

enum BookingStatus {
  CANCELLED
  PAID
  RESCHEDULED
}

input BulkCreateVendorsInput {
  vendors: [VendorSignUpInput!]!
}

type BusinessProfile {
  accountNumber: String
  bankName: String
  branch: String
  businessName: String!
  categories: [String!]!
  contactNumber: String!
  coverImageUrl: String
  createdAt: DateTime!
  description: String!
  facebookUrl: String
  galleryUrls: [String!]
  id: ID!
  instagramUrl: String
  location: String!
  logoUrl: String
  tags: [String!]!
  twitterUrl: String
  updatedAt: DateTime!
  user: User
  userId: String!
  website: String
}

enum CancellationPolicyType {
  FIXED_COMMITMENT
  FLEXIBLE_RESCHEDULING
}

type Category {
  id: ID!
  name: String
}

type Child {
  createdAt: DateTime!
  dateOfBirth: DateTime!
  firstName: String!
  gender: Gender!
  id: ID!
  lastName: String!
  parentId: ID!
  updatedAt: DateTime!
}

type ChildBookingDetailDto {
  dateOfBirth: DateTime!
  firstName: String!
  lastName: String!
}

input ChildInput {
  dateOfBirth: DateTime!
  firstName: String!
  gender: String!
  lastName: String!
}

type ClassPackage {
  ageGroups: [AgeGroup!]!
  beforeYouComeInstructions: String
  cancellationPolicyType: CancellationPolicyType!
  category: Category!
  categoryId: ID!
  coverImageUrl: String
  createdAt: DateTime!
  description: String
  id: ID!
  name: String!
  pricePerChild: Float!
  rescheduleDaysBefore: Float
  scheduleSlots: [ScheduleSlot]
  status: ClassPackageStatus!
  tags: [String]
  updatedAt: DateTime!
  vendor: User!
  vendorId: ID!
}

enum ClassPackageStatus {
  ARCHIVED
  DRAFT
  PUBLISHED
}

input CreateBusinessProfileInput {
  accountNumber: String
  bankName: String
  branch: String
  businessName: String!
  categories: [String!]!
  contactNumber: String!
  coverImageUrl: String
  description: String!
  facebookUrl: String
  galleryUrls: [String!]
  instagramUrl: String
  location: String!
  logoUrl: String
  tags: [String!]!
  twitterUrl: String
  website: String
}

input CreateChildInput {
  dateOfBirth: DateTime!
  firstName: String!
  gender: Gender!
  lastName: String!
}

input CreateClassPackageInput {
  ageGroupIds: [ID!]!
  beforeYouComeInstructions: String!
  cancellationPolicyType: String!
  categoryId: ID!
  coverImageUrl: String
  customDatesInput: CustomDatesRecurrenceInput
  dailyRecurrenceInput: DailyRecurrenceInput
  description: String!
  name: String!
  pricePerChild: Float!
  rescheduleDaysBefore: Int
  schedulingType: SchedulingType!
  status: String
  tags: [String!]!
  weeklyRecurrenceInput: WeeklyRecurrenceInput
}

input CreateNotificationInput {
  message: String!
  type: String!
}

input CreateVendorProfileDto {
  description: String!
  instituteName: String!
  phoneNumber: String
  website: String
}

input CustomDateSlotInput {
  availableSlots: Int!
  date: DateTime!
  endTime: DateTime!
  startTime: DateTime!
}

input CustomDatesRecurrenceInput {
  slots: [CustomDateSlotInput!]!
}

input DailyRecurrenceInput {
  availableSlotsPerOccurrence: Int!
  recurrenceEndDate: DateTime
  recurrenceStartDate: DateTime!
  slotEndTime: DateTime!
  slotStartTime: DateTime!
}

type DashboardMetricsDto {
  """Total amount from online payments."""
  onlinePaymentsTotal: Float!

  """Number of users registered as parents."""
  parentsRegistered: Int!

  """Total number of registered users."""
  totalUsers: Int!

  """Number of users registered as vendors."""
  vendorsRegistered: Int!
}

input DateRangeFilterDto {
  endDate: String
  startDate: String
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"""Represents a day of the week."""
enum DayOfWeek {
  FRIDAY
  MONDAY
  SATURDAY
  SUNDAY
  THURSDAY
  TUESDAY
  WEDNESDAY
}

input DeleteBusinessProfileInput {
  confirmation: String!
}

input ForgotPasswordInput {
  email: String!
}

"""Gender of a child or user"""
enum Gender {
  FEMALE
  MALE
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type MonthlyPaymentDataDto {
  month: String!
  totalAmount: Float!
}

type Mutation {
  """
  Adds a new child to the authenticated parent's profile. Restricted to PARENT role.
  """
  addChild(input: CreateChildInput!): Child!

  """Save a class package to the parent's favorites"""
  addSavedClass(
    """The ID of the class package to save."""
    classPackageId: ID!
  ): SavedClassPackage!

  """Authenticates an admin user and returns an access token."""
  adminSignIn(input: AdminSignInInput!): AuthResponse!

  """
  Updates the active status or soft-delete status of a user. Admin role required. Returns the updated user view.
  """
  adminUpdateUserStatus(
    """The update data specifying new status flags."""
    input: AdminUpdateUserStatusInput!

    """The unique identifier of the user whose status is to be updated."""
    userId: ID!
  ): AdminUserView!

  """Approves a vendor profile. Requires ADMIN privileges."""
  approveVendor(
    """The ID of the vendor to approve."""
    vendorId: String!
  ): VendorProfile!

  """Creates multiple vendor accounts in bulk. Requires ADMIN privileges."""
  bulkCreateVendors(input: BulkCreateVendorsInput!): AuthResponse!

  """Creates a new admin account. Formerly required ADMIN privileges."""
  createAdminAccount(input: AdminAccountInput!): AuthResponse!

  """
  Creates a new business profile for the authenticated vendor. Requires VENDOR role.
  """
  createMyBusinessProfile(input: CreateBusinessProfileInput!): BusinessProfile!

  """
  Creates a new class package for the currently authenticated vendor. Cover image URL can be optionally provided if already uploaded elsewhere.
  """
  createMyClassPackage(input: CreateClassPackageInput!): ClassPackage!

  """Creates a new notification for the currently authenticated user."""
  createNotification(input: CreateNotificationInput!): Notification!

  """
  Deletes a child's profile for the authenticated parent. Restricted to PARENT role.
  """
  deleteChild(childId: ID!): OperationStatusDto!

  """
  Deletes the business profile of the currently authenticated vendor. This also archives associated classes. Cannot be undone.
  """
  deleteMyBusinessProfile(
    """Confirmation input for deleting the business profile."""
    input: DeleteBusinessProfileInput!
  ): OperationStatusDto!

  """
  Deletes a class package owned by the currently authenticated vendor. This operation cannot be undone.
  """
  deleteMyClassPackage(
    """The ID of the class package to delete."""
    id: ID!
  ): OperationStatusDto!

  """
  Initiates the password reset process by sending a reset code to the user's email.
  """
  forgotPassword(input: ForgotPasswordInput!): OperationStatusDto!

  """
  Logs out the currently authenticated user and invalidates their session.
  """
  logout: OperationStatusDto!

  """Marks a notification as read for the currently authenticated user."""
  markNotificationAsRead(id: String!): Notification!

  """Registers a new parent account in the system."""
  parentSignUp(input: ParentSignUpInput!): AuthResponse!

  """Creates or updates the profile for the currently authenticated vendor."""
  registerVendorProfile(
    """Data for creating the vendor profile."""
    input: CreateVendorProfileDto!
  ): VendorProfile!

  """Remove a class package from the parent's favorites"""
  removeSavedClass(
    """The ID of the class package to remove."""
    classPackageId: ID!
  ): OperationStatusDto!

  """Resets an admin user's password. Requires ADMIN privileges."""
  resetAdminPassword(input: ResetAdminPasswordInput!): AuthResponse!

  """
  Resets a user's password using the verification code sent to their email.
  """
  resetPassword(input: ResetPasswordInput!): OperationStatusDto!

  """Authenticates a user and returns an access token."""
  signIn(input: SignInInput!): AuthResponse!

  """Registers a new student account in the system."""
  signUp(input: SignUpInput!): AuthResponse!

  """
  Updates a child's information for the authenticated parent. Restricted to PARENT role.
  """
  updateChild(childId: ID!, input: UpdateChildInput!): Child!

  """
  Updates the business profile for the authenticated vendor. Requires VENDOR role.
  """
  updateMyBusinessProfile(input: UpdateBusinessProfileInput!): BusinessProfile!

  """
  Updates an existing class package for the currently authenticated vendor. Cover image URL can be optionally provided or set to null to remove.
  """
  updateMyClassPackage(
    """The ID of the class package to update."""
    id: ID!
    input: UpdateClassPackageInput!
  ): ClassPackage!

  """Updates the password of the currently authenticated parent user."""
  updateMyParentPassword(input: UpdateParentPasswordInput!): OperationStatusDto!

  """Updates the profile of the currently authenticated parent user."""
  updateMyParentProfile(input: UpdateParentProfileInput!): User!

  """
  Updates the profile of the currently authenticated user. (Generic - parent-specific update is in AuthResolver)
  """
  updateMyProfile(
    """The data to update for the user profile."""
    input: UpdateUserDto!
  ): User!

  """Updates the profile for the currently authenticated vendor."""
  updateVendorProfile(
    """Data for updating the vendor profile."""
    input: UpdateVendorProfileDto!
  ): VendorProfile!

  """Authenticates a vendor and returns an access token."""
  vendorLogin(input: VendorLoginInput!): AuthResponse!

  """Registers a new vendor account in the system."""
  vendorSignUp(input: VendorSignUpInput!): AuthResponse!
}

type Notification {
  createdAt: DateTime!
  data: JSON!
  id: String!
  message: String!
  read: Boolean!
  title: String!
  type: String!
  updatedAt: DateTime!
  userId: String!
}

type OperationStatusDto {
  message: String
  success: Boolean!
}

type ParentBookingDetailsDto {
  bookedDate: String!
  bookedTimeSlot: String!
  bookingId: ID!
  bookingStatus: BookingStatus!
  classPackageId: ID!
  classPackageName: String!
  enrolledChildren: [ChildBookingDetailDto!]!
  location: String
  paymentType: PaymentType!
  scheduleSlotId: ID!
  vendorId: ID!
  vendorName: String!
}

enum ParentBookingType {
  PAST
  UPCOMING
}

input ParentSignUpInput {
  children: [ChildInput!]!
  confirmPassword: String!
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  phoneNumber: String!
}

"""The status of a payment."""
enum PaymentStatus {
  COMPLETED
  FAILED
  PENDING
  REFUNDED
}

enum PaymentType {
  CARD
  CLASS_PACKAGE_PURCHASE
}

type Query {
  """
  Retrieves dashboard data for administrators, including metrics and monthly payment trends. Requires ADMIN privileges.
  """
  adminDashboardData(
    """Optional date range (startDate, endDate) to filter data."""
    filters: DateRangeFilterDto
  ): AdminDashboardDataDto!

  """
  Retrieves detailed information for a specific user by ID. Admin role required.
  """
  adminGetUserDetails(
    """The unique identifier of the user to retrieve details for."""
    userId: ID!
  ): AdminUserDetails

  """
  Retrieves revenue statistics for a specific vendor. Admin role required. Used in admin panel for vendor details view.
  """
  adminGetVendorRevenueStats(
    """Optional date range to filter revenue statistics."""
    filters: DateRangeFilterDto

    """The unique identifier of the vendor to get revenue stats for."""
    vendorId: ID!
  ): VendorRevenueMetricsDto

  """
  Retrieves a list of all transactions. Optionally filter by date range. Requires ADMIN privileges.
  """
  adminListAllTransactions(
    """Optional date range (startDate, endDate) to filter transactions."""
    filters: DateRangeFilterDto
  ): [AdminTransactionListView!]!

  """
  Lists all users in the platform. Admin role required. Optionally shows soft-deleted users.
  """
  adminListAllUsers(
    """Set to true to include soft-deleted users in the list."""
    showDeleted: Boolean = false
  ): [AdminUserView!]!

  """
  Retrieves a single class package by its ID. If the authenticated user is a vendor, it ensures the package belongs to them.
  """
  classPackage(
    """The ID of the class package to retrieve."""
    id: ID!
  ): ClassPackage

  """
  Retrieves a specific child by ID for the authenticated parent. Restricted to PARENT role.
  """
  getChild(childId: ID!): Child

  """
  Retrieves the business profile of the currently authenticated vendor. Requires VENDOR role.
  """
  getMyBusinessProfile: BusinessProfile

  """
  Retrieves all children for the authenticated parent. Restricted to PARENT role.
  """
  listChildren: [Child!]!

  """List all saved class packages for the parent"""
  listSavedClasses: [SavedClassPackage!]!

  """
  Retrieves a list of users. (Placeholder - typically admin-only and with pagination/filtering)
  """
  listUsers: [User!]!

  """Lists all vendor profiles. Requires ADMIN privileges."""
  listVendors: [VendorProfile!]!

  """
  Retrieves the profile of the currently authenticated user. (Alias for AuthResolver.me)
  """
  me: User!

  """
  Retrieves all class packages created by the currently authenticated vendor.
  """
  myClassPackages: [ClassPackage!]!

  """Retrieves all notifications for the currently authenticated user."""
  myNotifications: [Notification!]!

  """
  Retrieves all bookings for the currently authenticated parent. Can be filtered by type (upcoming or past bookings).
  """
  myParentBookings(
    """Specifies whether to fetch 'upcoming' or 'past' bookings."""
    type: ParentBookingType!
  ): [ParentBookingDetailsDto!]!

  """
  Retrieves the transaction history for the currently authenticated parent user.
  """
  myTransactionHistory: [TransactionViewDto!]!

  """
  Retrieves all bookings associated with the currently authenticated vendor. Supports filtering by class package ID and date range.
  """
  myVendorBookings(
    """Optional filters for class package ID, start date, and end date."""
    filters: BookingFilterInput
  ): [BookingDetailsDto!]!

  """
  Retrieves dashboard data, including revenue metrics, for the currently authenticated vendor. Supports date range filtering.
  """
  myVendorDashboardRevenue(
    """Optional date range (startDate, endDate) to filter revenue data."""
    filters: DateRangeFilterDto
  ): VendorDashboardDataDto!

  """Retrieves the profile of the currently authenticated vendor."""
  myVendorProfile: VendorProfile!
}

input ResetAdminPasswordInput {
  email: String!
  newPassword: String!
}

input ResetPasswordInput {
  code: String!
  confirmNewPassword: String!
  email: String!
  newPassword: String!
}

type SavedClassPackage {
  classPackage: ClassPackage!
  classPackageId: ID!
  createdAt: DateTime!
  id: ID!
  userId: ID!
}

type ScheduleSlot {
  availableSlots: Float!
  endTime: DateTime!
  id: ID!
  startTime: DateTime!
}

"""Defines the type of scheduling for a class package."""
enum SchedulingType {
  CUSTOM_DATES
  DAILY
  FIXED_SLOTS
  WEEKLY
}

input SignInInput {
  email: String!
  password: String!
  rememberMe: Boolean! = false
}

input SignUpInput {
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  role: UserRole!
}

type TransactionViewDto {
  className: String!
  classPackageId: ID!
  id: ID!
  paymentAmount: Float!
  paymentDate: DateTime!
  paymentMethod: String
  paymentStatus: PaymentStatus!
  scheduleDetails: String
  transactionId: String
  vendorName: String!
}

input UpdateBusinessProfileInput {
  accountNumber: String
  bankName: String
  branch: String
  businessName: String
  categories: [String!]
  contactNumber: String
  coverImageUrl: String
  description: String
  facebookUrl: String
  galleryUrls: [String!]
  instagramUrl: String
  location: String
  logoUrl: String
  tags: [String!]
  twitterUrl: String
  website: String
}

input UpdateChildInput {
  dateOfBirth: DateTime
  firstName: String
  gender: Gender
  lastName: String
}

input UpdateClassPackageInput {
  ageGroupIds: [ID!]
  beforeYouComeInstructions: String
  cancellationPolicyType: String
  categoryId: ID
  coverImageUrl: String
  customDatesInput: CustomDatesRecurrenceInput
  dailyRecurrenceInput: DailyRecurrenceInput
  description: String
  name: String
  pricePerChild: Float
  rescheduleDaysBefore: Int
  schedulingType: SchedulingType
  status: String
  tags: [String!]
  weeklyRecurrenceInput: WeeklyRecurrenceInput
}

input UpdateParentPasswordInput {
  confirmNewPassword: String!
  currentPassword: String!
  newPassword: String!
}

input UpdateParentProfileInput {
  firstName: String!
  lastName: String!
  phoneNumber: String!
}

input UpdateUserDto {
  avatarUrl: String
  name: String
}

input UpdateVendorProfileDto {
  description: String
  instituteName: String
  phoneNumber: String
  website: String
}

type User {
  avatarUrl: String
  cognitoSub: String!
  createdAt: DateTime!
  email: String!
  firstName: String!
  id: String!
  lastName: String!
  phoneNumber: String
  role: String!
  updatedAt: DateTime!
}

enum UserRole {
  ADMIN
  PARENT
  STUDENT
  VENDOR
}

type VendorDashboardDataDto {
  metrics: VendorRevenueMetricsDto!
  monthlyPayments: [MonthlyPaymentDataDto!]!
}

input VendorLoginInput {
  email: String!
  password: String!
}

type VendorProfile {
  approved: Boolean!
  createdAt: DateTime!
  description: String!
  id: ID!
  instituteName: String!
  phoneNumber: String
  updatedAt: DateTime!
  user: User
  website: String
}

type VendorRevenueMetricsDto {
  pendingPayoutToDate: Float!
  totalPaymentsInRange: Float!
}

input VendorSignUpInput {
  confirmPassword: String!
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  phoneNumber: String!
  secondaryPhoneNumber: String!
  termsAccepted: Boolean!
}

input WeeklyRecurrenceInput {
  availableSlotsPerOccurrence: Int!
  daysOfWeek: [DayOfWeek!]!
  recurrenceEndDate: DateTime
  recurrenceStartDate: DateTime!
  slotEndTime: DateTime!
  slotStartTime: DateTime!
}