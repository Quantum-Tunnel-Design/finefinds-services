generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String                   @id @default(cuid())
  email                String                   @unique
  password             String? // Nullable for Cognito-managed users where password is not stored locally
  firstName            String
  lastName             String
  phoneNumber          String?
  secondaryPhoneNumber String? // For vendors
  role                 UserRole                 @default(PARENT)
  cognitoSub           String?                  @unique // For Cognito user identifier
  isEmailVerified      Boolean                  @default(false)
  isActive             Boolean                  @default(true)
  termsAccepted        Boolean?                 @default(false) // For vendors
  createdAt            DateTime                 @default(now())
  updatedAt            DateTime                 @updatedAt
  children             Child[]
  sessions             Session[]
  loginAttempts        LoginAttempt[]
  businessProfile      BusinessProfile?
  auditLogs            AuditLog[]
  createdClassPackages ClassPackage[]           @relation("VendorClassPackages")
  enrollments          ClassPackageEnrollment[] // Parent's enrollments
  vendorProfile        VendorProfile? // For VendorProfile.user
  courses              Course[]                 @relation("VendorCourses") // For Course.vendor
  courseEnrollments    Enrollment[]             @relation("UserCourseEnrollments") // For old Enrollment.user
  reviews              Review[] // For Review.user
  payments             Payment[] // For Payment.user
  notifications        Notification[] // For Notification.user
  savedClassPackages   SavedClassPackage[] // Added for saved classes

  @@index([email])
  @@index([cognitoSub])
}

model VendorProfile {
  id            String   @id @default(uuid())
  userId        String   @unique
  instituteName String
  description   String
  website       String?
  phoneNumber   String?
  approved      Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("vendor_profiles")
}

model Course {
  id          String       @id @default(uuid())
  title       String
  description String
  category    String
  price       Float
  level       CourseLevel
  status      CourseStatus @default(DRAFT)
  isPublished Boolean      @default(false)
  vendorId    String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  vendor      User         @relation("VendorCourses", fields: [vendorId], references: [id], onDelete: Cascade)
  enrollments Enrollment[]
  reviews     Review[]
  schedules   Schedule[]

  @@map("courses")
}

model Enrollment {
  id        String   @id @default(uuid())
  userId    String
  courseId  String
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user      User     @relation("UserCourseEnrollments", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("enrollments")
}

model Schedule {
  id        String   @id @default(uuid())
  courseId  String
  startTime DateTime
  endTime   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  course    Course   @relation(fields: [courseId], references: [id])

  @@map("schedules")
}

model Review {
  id        String   @id @default(uuid())
  userId    String
  courseId  String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("reviews")
}

model Payment {
  id                       String                  @id @default(cuid()) // Changed from uuid for consistency
  // userId    String // Assuming payments for vendor revenue are via enrollment
  // user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  classPackageEnrollmentId String?                 @unique // Each enrollment has one primary payment record, made optional if some payments are not enrollment based
  classPackageEnrollment   ClassPackageEnrollment? @relation(fields: [classPackageEnrollmentId], references: [id], onDelete: SetNull)

  amount            Float
  status            PaymentStatus
  paymentMethod     String? // e.g., "card", "paypal"
  transactionId     String?       @unique // From payment gateway
  isPaidOutToVendor Boolean       @default(false) // New field
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  User              User?         @relation(fields: [userId], references: [id])
  userId            String?

  @@index([classPackageEnrollmentId])
  @@map("payments")
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  type      String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Child {
  id          String                   @id @default(cuid())
  firstName   String
  lastName    String
  dateOfBirth DateTime
  gender      Gender // Changed from String to Gender enum
  userId      String
  user        User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime                 @default(now())
  updatedAt   DateTime                 @updatedAt
  enrollments ClassPackageEnrollment[] @relation("EnrolledChildren")

  @@index([userId])
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
}

model BusinessProfile {
  id            String   @id @default(cuid())
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id])
  businessName  String   @db.VarChar(100)
  location      String   @db.VarChar(500)
  description   String   @db.Text
  contactNumber String
  website       String?  @db.VarChar(255)
  facebookUrl   String?  @db.VarChar(255)
  instagramUrl  String?  @db.VarChar(255)
  twitterUrl    String?  @db.VarChar(255)
  bankName      String?  @db.VarChar(100)
  accountNumber String?  @db.VarChar(20)
  branch        String?  @db.VarChar(100)
  logoUrl       String?  @db.VarChar(255)
  coverImageUrl String?  @db.VarChar(255)
  galleryUrls   String[] @db.VarChar(255)
  categories    String[]
  tags          String[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([userId])
}

model AgeGroup {
  id            String         @id @default(cuid())
  name          String         @unique @db.VarChar(50)
  classPackages ClassPackage[] @relation("ClassPackageAgeGroups")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@map("age_groups")
}

model Category {
  id            String         @id @default(cuid())
  name          String         @unique @db.VarChar(100)
  classPackages ClassPackage[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@map("categories")
}

model ClassPackage {
  id                        String                 @id @default(cuid())
  vendorId                  String
  vendor                    User                   @relation("VendorClassPackages", fields: [vendorId], references: [id], onDelete: Cascade)
  name                      String                 @db.VarChar(100)
  description               String                 @db.Text
  beforeYouComeInstructions String                 @db.Text
  pricePerChild             Float
  coverImageUrl             String?                @db.VarChar(255)
  status                    ClassPackageStatus     @default(DRAFT)
  cancellationPolicyType    CancellationPolicyType
  rescheduleDaysBefore      Int?

  categoryId    String
  category      Category                 @relation(fields: [categoryId], references: [id])
  ageGroups     AgeGroup[]               @relation("ClassPackageAgeGroups")
  tags          String[]                 @db.VarChar(50)
  scheduleSlots ScheduleSlot[]
  enrollments   ClassPackageEnrollment[]
  savedByUsers  SavedClassPackage[] // Added for users who saved this package

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([vendorId])
  @@index([categoryId])
  @@map("class_packages")
}

model ScheduleSlot {
  id             String                   @id @default(cuid())
  classPackage   ClassPackage             @relation(fields: [classPackageId], references: [id], onDelete: Cascade)
  classPackageId String
  startTime      DateTime
  endTime        DateTime
  availableSlots Int // Number of children spots
  createdAt      DateTime                 @default(now())
  updatedAt      DateTime                 @updatedAt
  enrollments    ClassPackageEnrollment[] // Relation to enrollments for this slot

  @@index([classPackageId])
}

model LoginAttempt {
  id        String   @id @default(uuid())
  userId    String
  success   Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([createdAt])
}

model AuditLog {
  id             String             @id @default(uuid())
  userId         String
  action         AuditLogAction
  entityType     AuditLogEntityType
  entityId       String
  changes        Json
  previousValues Json
  createdAt      DateTime           @default(now())
  user           User               @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([entityType, entityId])
  @@index([createdAt])
}

enum AuditLogAction {
  CREATE
  UPDATE
  DELETE
  LOGIN
  LOGOUT
  VIEW // Example action
}

enum AuditLogEntityType {
  USER
  VENDOR_PROFILE
  BUSINESS_PROFILE
  CLASS_PACKAGE
  ORDER
  PAYMENT
  // Add other relevant entity types
}

model ClassPackageEnrollment {
  id               String        @id @default(cuid())
  user             User          @relation(fields: [userId], references: [id], onDelete: Cascade) // Parent
  userId           String
  classPackage     ClassPackage  @relation(fields: [classPackageId], references: [id], onDelete: Cascade)
  classPackageId   String
  scheduleSlot     ScheduleSlot  @relation(fields: [scheduleSlotId], references: [id], onDelete: Cascade)
  scheduleSlotId   String
  enrolledChildren Child[]       @relation("EnrolledChildren")
  bookingStatus    BookingStatus @default(PAID)
  paymentType      PaymentType   @default(CARD) // This might be redundant if Payment model has paymentMethod
  bookedAt         DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  payment          Payment? // Relation to the payment record for this enrollment

  // A user (parent) can book a specific slot once (for potentially multiple children in that booking)
  @@unique([userId, scheduleSlotId])
  @@index([userId])
  @@index([classPackageId])
  @@index([scheduleSlotId])
  @@map("class_package_enrollments")
}

model SavedClassPackage {
  id             String       @id @default(cuid())
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  classPackageId String
  classPackage   ClassPackage @relation(fields: [classPackageId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())

  @@unique([userId, classPackageId]) // Prevent duplicate saves
  @@index([userId])
  @@index([classPackageId])
  @@map("saved_class_packages")
}

enum UserRole {
  STUDENT
  PARENT
  VENDOR
  ADMIN
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum EnrollmentStatus {
  PENDING
  ACTIVE
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum CourseLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum ClassPackageStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum CancellationPolicyType {
  FIXED_COMMITMENT
  FLEXIBLE_RESCHEDULING
}

enum DayOfWeek {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

// New Enums for Bookings
enum BookingStatus {
  PAID
  CANCELLED
  RESCHEDULED
  // PENDING_PAYMENT // Future consideration
}

enum PaymentType {
  CARD
  // OTHER // Future consideration
}

// Gender Enum (if not already defined elsewhere, define it here)
// If it's defined in code first approach (e.g. TypeGraphQL and used in Prisma with /// comments) ensure consistency.
// For Prisma-first, defining it here is standard.

enum Gender {
  MALE
  FEMALE
  // OTHER // Optional, based on requirements
}
