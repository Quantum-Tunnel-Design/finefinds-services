generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String                   @id @default(cuid())
  email                String                   @unique
  password             String?
  firstName            String
  lastName             String
  phoneNumber          String?
  secondaryPhoneNumber String?
  role                 UserRole                 @default(PARENT)
  cognitoSub           String?                  @unique
  isEmailVerified      Boolean                  @default(false)
  isActive             Boolean                  @default(true)
  termsAccepted        Boolean?                 @default(false)
  createdAt            DateTime                 @default(now())
  updatedAt            DateTime                 @updatedAt
  deletedAt            DateTime?
  auditLogs            AuditLog[]
  loginAttempts        LoginAttempt[]
  sessions             Session[]
  notifications        Notification[]
  payments             Payment[]
  reviews              Review[]
  savedClassPackages   SavedClassPackage[]
  parent               Parent?
  vendor               Vendor?
  children             Child[]                  @relation("UserChildren")
  courseEnrollments    Enrollment[]             @relation("UserCourseEnrollments")
  vendorProfile        VendorProfile?           @relation("UserVendorProfile")

  @@index([email])
  @@index([cognitoSub])
  @@map("users")
}

model Parent {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  children  Child[]
  enrollments ClassPackageEnrollment[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@map("parents")
}

model Vendor {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  profiles  VendorProfile[]
  classPackages ClassPackage[]
  courses   Course[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@map("vendors")
}

model VendorProfile {
  id            String   @id @default(cuid())
  vendorId      String
  vendor        Vendor   @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  user          User     @relation("UserVendorProfile", fields: [userId], references: [id], onDelete: Cascade)
  userId        String   @unique
  profileLogoUrl String?  @db.VarChar(255)
  coverImageUrl  String?  @db.VarChar(255)
  businessName   String   @db.VarChar(100)
  location       String   @db.VarChar(500)
  description    String   @db.Text
  contactNumber  String   @db.VarChar(20)
  
  websiteUrl        String?  @db.VarChar(255)
  facebookUrl       String?  @db.VarChar(255)
  instagramUrl      String?  @db.VarChar(255)
  linkedInUrl       String?  @db.VarChar(255)
  twitterUrl        String?  @db.VarChar(255)
  tiktokUrl         String?  @db.VarChar(255)
  youtubeUrl        String?  @db.VarChar(255)

  bankName          String?  @db.VarChar(100)
  accountNumber     String?  @db.VarChar(20)
  bankBranch        String?  @db.VarChar(100)

  approved          Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  categories        VendorProfileCategory[]
  tags              VendorProfileTag[]
  galleryImages     GalleryImage[]

  @@index([vendorId])
  @@index([userId])
  @@map("vendor_profiles")
}

model GalleryImage {
  id              String        @id @default(cuid())
  vendorProfileId String
  url             String        @db.VarChar(255)
  caption         String?       @db.VarChar(255)
  order           Int?
  createdAt       DateTime      @default(now())
  vendorProfile   VendorProfile @relation(fields: [vendorProfileId], references: [id], onDelete: Cascade)

  @@index([vendorProfileId])
  @@map("gallery_images")
}

model Course {
  id          String       @id @default(uuid())
  title       String
  description String
  category    String
  price       Float
  level       CourseLevel
  status      CourseStatus @default(DRAFT)
  isPublished Boolean      @default(false)
  vendorId    String
  vendor      Vendor       @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  enrollments Enrollment[]
  reviews     Review[]
  schedules   Schedule[]

  @@index([vendorId])
  @@map("courses")
}

model Enrollment {
  id        String   @id @default(uuid())
  userId    String
  courseId  String
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user      User     @relation("UserCourseEnrollments", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
  @@map("enrollments")
}

model Schedule {
  id        String   @id @default(uuid())
  courseId  String
  startTime DateTime
  endTime   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  course    Course   @relation(fields: [courseId], references: [id])

  @@map("schedules")
}

model Review {
  id        String   @id @default(uuid())
  userId    String
  courseId  String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("reviews")
}

model Payment {
  id                       String                  @id @default(cuid())
  userId                   String?
  amount                   Float
  createdAt                DateTime                @default(now())
  updatedAt                DateTime                @updatedAt
  classPackageEnrollmentId String?                 @unique
  isPaidOutToVendor        Boolean                 @default(false)
  paymentMethod            String?
  transactionId            String?                 @unique
  status                   PaymentStatus
  classPackageEnrollment   ClassPackageEnrollment? @relation(fields: [classPackageEnrollmentId], references: [id])
  User                     User?                   @relation(fields: [userId], references: [id])

  @@index([classPackageEnrollmentId])
  @@map("payments")
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("notifications")
}

model Child {
  id            String   @id @default(cuid())
  firstName     String
  lastName      String
  gender        Gender
  dateOfBirth   DateTime
  parentId      String
  parent        Parent   @relation(fields: [parentId], references: [id], onDelete: Cascade)
  userId        String
  user          User     @relation("UserChildren", fields: [userId], references: [id], onDelete: Cascade)
  enrollments   ClassPackageEnrollment[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([parentId])
  @@index([userId])
  @@map("children")
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model AgeGroup {
  id          String   @id @default(cuid())
  name        String   @unique
  minAge      Int
  maxAge      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("age_groups")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  vendorProfiles VendorProfileCategory[]

  @@map("categories")
}

model ClassPackage {
  id          String   @id @default(cuid())
  title       String
  description String
  price       Float
  status      ClassPackageStatus @default(DRAFT)
  vendorId    String
  vendor      Vendor   @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  enrollments ClassPackageEnrollment[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([vendorId])
  @@map("class_packages")
}

model ScheduleSlot {
  id        String   @id @default(cuid())
  startTime DateTime
  endTime   DateTime
  enrollments ClassPackageEnrollment[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("schedule_slots")
}

model LoginAttempt {
  id        String   @id @default(uuid())
  userId    String
  ipAddress String
  userAgent String
  success   Boolean
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("login_attempts")
}

model AuditLog {
  id        String   @id @default(uuid())
  userId    String
  action    AuditLogAction
  entityType AuditLogEntityType
  entityId  String
  details   String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("audit_logs")
}

model ClassPackageEnrollment {
  id            String   @id @default(cuid())
  parentId      String
  parent        Parent   @relation(fields: [parentId], references: [id], onDelete: Cascade)
  classPackageId String
  classPackage  ClassPackage @relation(fields: [classPackageId], references: [id], onDelete: Cascade)
  scheduleSlotId String
  scheduleSlot  ScheduleSlot @relation(fields: [scheduleSlotId], references: [id], onDelete: Cascade)
  enrolledChildren Child[]
  bookingStatus BookingStatus @default(PENDING)
  paymentType   PaymentType
  bookedAt      DateTime @default(now())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  payment       Payment?

  @@index([parentId])
  @@index([classPackageId])
  @@index([scheduleSlotId])
  @@map("class_package_enrollments")
}

model SavedClassPackage {
  id              String   @id @default(cuid())
  userId          String
  classPackageId  String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, classPackageId])
  @@index([userId])
  @@index([classPackageId])
  @@map("saved_class_packages")
}

model VendorProfileCategory {
  id              String   @id @default(cuid())
  vendorProfileId String
  categoryId      String
  vendorProfile   VendorProfile @relation(fields: [vendorProfileId], references: [id], onDelete: Cascade)
  category        Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([vendorProfileId, categoryId])
  @@index([vendorProfileId])
  @@index([categoryId])
  @@map("vendor_profile_categories")
}

model VendorProfileTag {
  id              String   @id @default(cuid())
  vendorProfileId String
  tagId           String
  vendorProfile   VendorProfile @relation(fields: [vendorProfileId], references: [id], onDelete: Cascade)
  tag             Tag @relation(fields: [tagId], references: [id], onDelete: Cascade)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([vendorProfileId, tagId])
  @@index([vendorProfileId])
  @@index([tagId])
  @@map("vendor_profile_tags")
}

model Tag {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  vendorProfiles VendorProfileTag[]

  @@map("tags")
}

enum AuditLogAction {
  CREATE
  UPDATE
  DELETE
}

enum AuditLogEntityType {
  USER
  VENDOR
  COURSE
  ENROLLMENT
  PAYMENT
}

enum UserRole {
  ADMIN
  VENDOR
  PARENT
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum EnrollmentStatus {
  PENDING
  ACTIVE
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum CourseLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum ClassPackageStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum CancellationPolicyType {
  FLEXIBLE
  MODERATE
  STRICT
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum PaymentType {
  CASH
  CARD
  BANK_TRANSFER
}

enum Gender {
  MALE
  FEMALE
  OTHER
}
