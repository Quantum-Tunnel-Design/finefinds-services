name: Deploy

on:
  pull_request:
    types: [closed]
    branches:
      - main
      - staging
      - qa
      - dev
      - sandbox

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: finefinds
  ECS_SERVICE: app
  ECS_CLUSTER: finefinds
  CONTAINER_NAME: app
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  NOTIFICATION_EMAIL: ${{ secrets.NOTIFICATION_EMAIL }}

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

  build:
    name: Build and Push Image
    needs: test
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  notify:
    name: Send Notifications
    needs: [deploy-sandbox, deploy-dev, deploy-qa, deploy-staging, deploy-prod]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Send Slack Notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
        env:
          SLACK_WEBHOOK_URL: ${{ env.SLACK_WEBHOOK_URL }}
        if: always()

      - name: Send Email Notification
        run: |
          aws ses send-email \
            --from "deployments@finefinds.com" \
            --destination "ToAddresses=${{ env.NOTIFICATION_EMAIL }}" \
            --message "Subject={Data=Deployment Status: ${{ github.event.pull_request.base.ref }},Charset=UTF-8},Body={Text={Data=Deployment to ${{ github.event.pull_request.base.ref }} environment has ${{ job.status }}. Commit: ${{ github.sha }},Charset=UTF-8}"
        if: always()

  deploy-sandbox:
    name: Deploy to Sandbox
    needs: build
    if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'sandbox'
    runs-on: ubuntu-latest
    environment: sandbox
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update ECS Task Definition
        run: |
          aws ecs register-task-definition \
            --cli-input-json file://task-definition.json \
            --environment file://config/sandbox.env

      - name: Deploy to ECS
        run: |
          aws ecs update-service --cluster $ECS_CLUSTER-sandbox \
            --service $ECS_SERVICE \
            --task-definition $(aws ecs describe-task-definition --task-definition $ECS_SERVICE --query 'taskDefinition.taskDefinitionArn' --output text) \
            --force-new-deployment

  deploy-dev:
    name: Deploy to Development
    needs: build
    if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'dev'
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update ECS Task Definition
        run: |
          aws ecs register-task-definition \
            --cli-input-json file://task-definition.json \
            --environment file://config/dev.env

      - name: Deploy to ECS
        run: |
          aws ecs update-service --cluster $ECS_CLUSTER-dev \
            --service $ECS_SERVICE \
            --task-definition $(aws ecs describe-task-definition --task-definition $ECS_SERVICE --query 'taskDefinition.taskDefinitionArn' --output text) \
            --force-new-deployment

  deploy-qa:
    name: Deploy to QA
    needs: build
    if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'qa'
    runs-on: ubuntu-latest
    environment: qa
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update ECS Task Definition
        run: |
          aws ecs register-task-definition \
            --cli-input-json file://task-definition.json \
            --environment file://config/qa.env

      - name: Deploy to ECS
        run: |
          aws ecs update-service --cluster $ECS_CLUSTER-qa \
            --service $ECS_SERVICE \
            --task-definition $(aws ecs describe-task-definition --task-definition $ECS_SERVICE --query 'taskDefinition.taskDefinitionArn' --output text) \
            --force-new-deployment

  deploy-staging:
    name: Deploy to Staging
    needs: build
    if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'staging'
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update ECS Task Definition
        run: |
          aws ecs register-task-definition \
            --cli-input-json file://task-definition.json \
            --environment file://config/staging.env

      - name: Deploy to ECS
        run: |
          aws ecs update-service --cluster $ECS_CLUSTER-staging \
            --service $ECS_SERVICE \
            --task-definition $(aws ecs describe-task-definition --task-definition $ECS_SERVICE --query 'taskDefinition.taskDefinitionArn' --output text) \
            --force-new-deployment

  deploy-prod:
    name: Deploy to Production
    needs: build
    if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update ECS Task Definition
        run: |
          aws ecs register-task-definition \
            --cli-input-json file://task-definition.json \
            --environment file://config/prod.env

      - name: Deploy to ECS
        run: |
          aws ecs update-service --cluster $ECS_CLUSTER-prod \
            --service $ECS_SERVICE \
            --task-definition $(aws ecs describe-task-definition --task-definition $ECS_SERVICE --query 'taskDefinition.taskDefinitionArn' --output text) \
            --force-new-deployment 