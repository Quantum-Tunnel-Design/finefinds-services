name: Backend Service Deployment

on:
  push:
    branches:
      - dev
      - qa
      - staging
      - main
  pull_request:
    types: [closed]
    branches:
      - main
      - staging
      - qa
      - dev
      - sandbox
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to deploy'
        required: true
        type: choice
        options:
          - dev
          - qa
          - staging
          - main
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - dev
          - qa
          - staging
          - prod
      skip_deploy:
        description: 'Skip deployment (only build and push)'
        required: false
        type: boolean
        default: false

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: finefindslk/base/node-services
  SERVICES_ENV: >-
    ${{ github.event_name == 'workflow_dispatch' && inputs.environment || 
    github.ref == 'refs/heads/main' && 'prod' || 
    github.ref == 'refs/heads/staging' && 'staging' || 
    github.ref == 'refs/heads/qa' && 'qa' || 
    github.ref == 'refs/heads/dev' && 'dev' ||
    'sandbox' }}
  ECR_REPOSITORY_BACKEND: finefinds-services-${{ github.event_name == 'workflow_dispatch' && inputs.environment || github.ref == 'refs/heads/main' && 'prod' || github.ref == 'refs/heads/staging' && 'staging' || github.ref == 'refs/heads/qa' && 'qa' || github.ref == 'refs/heads/dev' && 'dev' || 'sandbox' }}
  # Task definition and service names for each environment
  TASK_DEF_FAMILY_DEV: FineFindsdevEcsTaskDef290F30C7
  TASK_DEF_FAMILY_QA: FineFindsqaEcsTaskDef290F30C7
  TASK_DEF_FAMILY_STAGING: FineFindsstagingEcsTaskDef290F30C7
  TASK_DEF_FAMILY_PROD: FineFindsprodEcsTaskDef290F30C7
  SERVICE_NAME_DEV: FineFinds-dev-EcsService5196398A-NE8PD74FF49F
  SERVICE_NAME_QA: FineFinds-qa-EcsService5196398A-gBUy7Nla9Poj
  SERVICE_NAME_STAGING: FineFinds-staging-EcsService5196398A-gBUy7Nla9Poj
  SERVICE_NAME_PROD: FineFinds-prod-EcsService5196398A-gBUy7Nla9Poj
  CLUSTER_NAME_DEV: finefinds-dev-cluster
  CLUSTER_NAME_QA: finefinds-qa-cluster
  CLUSTER_NAME_STAGING: finefinds-staging-cluster
  CLUSTER_NAME_PROD: finefinds-prod-cluster
jobs:
  input_check:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Check for inputs to validate
        id: input_check
        run: |
          echo "Input Env: ${{inputs.environment }}"
          echo "Env: ${{env.SERVICES_ENV}}"
          echo "Branch: ${{inputs.branch}}"
          echo "Skip Deploy: ${{inputs.skip_deploy}}"
          echo "Role Id: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-finefinds-services-${{ github.ref_name == 'main' && 'prod' || github.ref_name }}"
          echo "Repository: ${{ github.repository }}"
          echo "Ref: ${{ github.ref }}"
          echo "Event Name: ${{ github.event_name }}"
          echo "Environment: ${{ github.event.repository.name }}"

  test:
    needs: input_check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run tests
        run: npm test
        
      - name: Build
        run: |
          npm run build
          echo "Contents of dist directory:"
          ls -la dist/
          echo "Contents of dist directory (recursive):"
          find dist/ -type f

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    if: ${{ !contains(github.event.head_commit.message, '[skip deploy]') }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-services-${{ github.ref_name == 'main' && 'prod' || github.ref_name }}
          aws-region: ${{ env.AWS_REGION }}
          role-duration-seconds: 3600
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registries: ${{ secrets.AWS_ACCOUNT_ID }}
        
      - name: Create ECR repository if not exists
        run: |
          aws ecr describe-repositories --repository-names ${{ env.ECR_REPOSITORY_BACKEND }} || \
          aws ecr create-repository --repository-name ${{ env.ECR_REPOSITORY_BACKEND }} --image-scanning-configuration scanOnPush=true
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Generate version
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            # Generate a version number that's compatible with ECS task definition revisions
            # Format: YYYYMMDD-{run_number}
            VERSION=$(date +'%Y%m%d')-${{ github.run_number }}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64
          build-args: |
            BUILDPLATFORM=linux/amd64
            TARGETPLATFORM=linux/amd64
            NODE_ENV=production
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_BACKEND }}:${{ steps.version.outputs.version }}
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_BACKEND }}:${{ github.ref_name }}
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_BACKEND }}:latest
          cache-from: |
            type=gha,scope=${{ github.workflow }}-${{ github.ref }}
            type=registry,ref=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_BACKEND }}:buildcache
          cache-to: type=registry,ref=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_BACKEND }}:buildcache,mode=max
          provenance: false
          sbom: false
          outputs: type=docker
          no-cache-filters: |
            node_modules
            dist
            .git
            .github
            **/*.md
            **/*.log
            **/*.test.*
            **/*.spec.*
            coverage
            .env*
          
      - name: Save version for deployment
        run: echo "${{ steps.version.outputs.version }}" > version.txt
        
      - name: Upload version file
        uses: actions/upload-artifact@v4
        with:
          name: version
          path: version.txt

  deploy-sandbox:
    needs: build-and-push
    if: ${{ !contains(github.event.head_commit.message, '[skip deploy]') && (github.ref == 'refs/heads/sandbox' || github.event.pull_request.base.ref == 'sandbox' || (github.event_name == 'workflow_dispatch' && inputs.environment == 'sandbox')) }}
    runs-on: ubuntu-latest
    environment: sandbox
    permissions:
      id-token: write
      contents: read
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download version file
        uses: actions/download-artifact@v4
        with:
          name: version

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-services-${{ github.ref_name == 'main' && 'prod' || github.ref_name }}
          aws-region: ${{ env.AWS_REGION }}
          role-duration-seconds: 3600
          
      - name: Deploy to ECS
        run: |
          VERSION=$(cat version.txt)
          aws ecs update-service \
            --cluster finefinds-sandbox \
            --service finefinds-backend \
            --force-new-deployment \
            --task-definition finefinds-backend:$VERSION

  deploy-dev:
    needs: build-and-push
    if: ${{ !contains(github.event.head_commit.message, '[skip deploy]') && (github.ref == 'refs/heads/dev' || github.event.pull_request.base.ref == 'dev' || (github.event_name == 'workflow_dispatch' && inputs.environment == 'dev')) }}
    runs-on: ubuntu-latest
    environment: dev
    permissions:
      id-token: write
      contents: read
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download version file
        uses: actions/download-artifact@v4
        with:
          name: version
          
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-services-${{ github.ref_name == 'main' && 'prod' || github.ref_name }}
          aws-region: ${{ env.AWS_REGION }}
          role-duration-seconds: 3600
          
      - name: Get RDS endpoint
        id: rds
        run: |
          echo "Fetching RDS endpoint for ${{ env.SERVICES_ENV }} environment..."
          # Add error handling and retry logic
          max_attempts=3
          attempt=1
          while [ $attempt -le $max_attempts ]; do
            echo "Attempt $attempt of $max_attempts"
            # Get RDS endpoint from Secrets Manager
            RDS_ENDPOINT=$(aws secretsmanager get-secret-value --secret-id "finefinds-${{ env.SERVICES_ENV }}-db-connection" --query 'SecretString' --output text | jq -r '.host')
            if [ $? -eq 0 ] && [ ! -z "$RDS_ENDPOINT" ]; then
              echo "RDS endpoint: $RDS_ENDPOINT"
              echo "rds_endpoint=$RDS_ENDPOINT" >> $GITHUB_OUTPUT
              break
            fi
            echo "Failed to get RDS endpoint. Retrying..."
            sleep 5
            attempt=$((attempt + 1))
          done
          
          if [ -z "$RDS_ENDPOINT" ]; then
            echo "::error::Failed to get RDS endpoint after $max_attempts attempts"
            exit 1
          fi

      - name: Get RDS credentials
        id: rds_creds
        run: |
          echo "Fetching RDS credentials from Secrets Manager..."
          RDS_SECRET=$(aws secretsmanager get-secret-value --secret-id "finefinds-${{ env.SERVICES_ENV }}-db-connection" --query 'SecretString' --output text)
          if [ -z "$RDS_SECRET" ]; then
            echo "::error::Failed to get RDS credentials from Secrets Manager"
            exit 1
          fi
          DB_HOST=$(echo $RDS_SECRET | jq -r '.host')
          DB_PORT=$(echo $RDS_SECRET | jq -r '.port')
          DB_NAME=$(echo $RDS_SECRET | jq -r '.dbname')
          DB_USER=$(echo $RDS_SECRET | jq -r '.username')
          DB_PASSWORD=$(echo $RDS_SECRET | jq -r '.password')
          if [ -z "$DB_HOST" ] || [ -z "$DB_PORT" ] || [ -z "$DB_NAME" ] || [ -z "$DB_USER" ] || [ -z "$DB_PASSWORD" ]; then
            echo "::error::Invalid RDS credentials format in Secrets Manager"
            exit 1
          fi
          echo "RDS credentials retrieved successfully"
          echo "db_host=$DB_HOST" >> $GITHUB_OUTPUT
          echo "db_port=$DB_PORT" >> $GITHUB_OUTPUT
          echo "db_name=$DB_NAME" >> $GITHUB_OUTPUT
          echo "db_user=$DB_USER" >> $GITHUB_OUTPUT
          echo "db_password=$DB_PASSWORD" >> $GITHUB_OUTPUT
          
      - name: Get Secret ARNs
        id: secrets
        run: |
          echo "Fetching Secret ARNs..."
          
          # Function to get secret ARN with retry
          get_secret_arn() {
            local secret_name=$1
            local max_attempts=3
            local attempt=1
            local secret_arn=""
            
            while [ $attempt -le $max_attempts ]; do
              echo "Attempt $attempt of $max_attempts to get ARN for $secret_name"
              secret_arn=$(aws secretsmanager get-secret-value --secret-id "$secret_name" --query 'ARN' --output text)
              
              if [ $? -eq 0 ] && [ ! -z "$secret_arn" ]; then
                echo "Successfully got ARN for $secret_name"
                echo "$secret_arn"
                return 0
              fi
              
              echo "Failed to get ARN for $secret_name. Retrying..."
              sleep 5
              attempt=$((attempt + 1))
            done
            
            echo "::error::Failed to get ARN for $secret_name after $max_attempts attempts"
            return 1
          }
          
          # Function to verify secret access
          verify_secret_access() {
            local secret_name=$1
            local max_attempts=3
            local attempt=1
            
            while [ $attempt -le $max_attempts ]; do
              echo "Attempt $attempt of $max_attempts to verify access to secret: $secret_name"
              if aws secretsmanager describe-secret --secret-id "$secret_name" > /dev/null; then
                echo "Successfully verified access to secret: $secret_name"
                return 0
              fi
              
              echo "Failed to verify access to secret: $secret_name. Retrying..."
              sleep 5
              attempt=$((attempt + 1))
            done
            
            echo "::error::Failed to verify access to secret: $secret_name after $max_attempts attempts"
            return 1
          }
          
          # Get and verify DB Connection Secret
          echo "Getting DB Connection Secret ARN..."
          DB_CONNECTION_ARN=$(get_secret_arn "finefinds-dev-db-connection")
          if [ $? -ne 0 ]; then exit 1; fi
          echo "db_connection_arn<<EOF" >> $GITHUB_OUTPUT
          echo "$DB_CONNECTION_ARN" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "Verifying DB Connection Secret access..."
          if ! verify_secret_access "finefinds-dev-db-connection"; then exit 1; fi
          
          # Get and verify Redis Connection Secret
          echo "Getting Redis Connection Secret ARN..."
          REDIS_CONNECTION_ARN=$(get_secret_arn "finefinds-dev-redis-connection")
          if [ $? -ne 0 ]; then exit 1; fi
          echo "redis_connection_arn<<EOF" >> $GITHUB_OUTPUT
          echo "$REDIS_CONNECTION_ARN" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "Verifying Redis Connection Secret access..."
          if ! verify_secret_access "finefinds-dev-redis-connection"; then exit 1; fi
          
          # Get and verify Cognito Config Secret
          echo "Getting Cognito Config Secret ARN..."
          COGNITO_CONFIG_ARN=$(get_secret_arn "finefinds-dev-cognito-config")
          if [ $? -ne 0 ]; then exit 1; fi
          echo "cognito_config_arn<<EOF" >> $GITHUB_OUTPUT
          echo "$COGNITO_CONFIG_ARN" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "Verifying Cognito Config Secret access..."
          if ! verify_secret_access "finefinds-dev-cognito-config"; then exit 1; fi
          
          # Get and verify JWT Secret
          echo "Getting JWT Secret ARN..."
          JWT_SECRET_ARN=$(get_secret_arn "finefinds-dev-jwt")
          if [ $? -ne 0 ]; then exit 1; fi
          echo "jwt_secret_arn<<EOF" >> $GITHUB_OUTPUT
          echo "$JWT_SECRET_ARN" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "Verifying JWT Secret access..."
          if ! verify_secret_access "finefinds-dev-jwt"; then exit 1; fi
          
          echo "All secrets verified successfully"

      - name: Create Task Definition
        id: task_def
        run: |
          VERSION=$(cat version.txt)
          
          # Function to create task definition JSON
          create_task_definition() {
            local env=$1
            local task_def_family=$2
            local execution_role="finefinds-$env-ecs-execution-role"
            local task_role="finefinds-$env-ecs-task-role"
            
            cat << EOF > task-definition.json
            {
              "family": "$task_def_family",
              "networkMode": "awsvpc",
              "requiresCompatibilities": ["FARGATE"],
              "cpu": "256",
              "memory": "512",
              "executionRoleArn": "arn:aws:iam::'"${{ secrets.AWS_ACCOUNT_ID }}"':role/$execution_role",
              "taskRoleArn": "arn:aws:iam::'"${{ secrets.AWS_ACCOUNT_ID }}"':role/$task_role",
              "runtimePlatform": {
                "operatingSystemFamily": "LINUX",
                "cpuArchitecture": "X86_64"
              },
              "proxyConfiguration": {
                "type": "APPMESH",
                "containerName": "envoy",
                "properties": [
                  {
                    "name": "IgnoredUID",
                    "value": "1337"
                  },
                  {
                    "name": "ProxyIngressPort",
                    "value": "15000"
                  },
                  {
                    "name": "ProxyEgressPort",
                    "value": "15001"
                  },
                  {
                    "name": "AppPorts",
                    "value": "3000"
                  },
                  {
                    "name": "EgressIgnoredIPs",
                    "value": "169.254.170.2,169.254.169.254"
                  }
                ]
              },
              "containerDefinitions": [
                {
                  "name": "AppContainer",
                  "image": "891076991993.dkr.ecr.us-east-1.amazonaws.com/'"${{ env.ECR_REPOSITORY_BACKEND }}"':'"$VERSION"'",
                  "essential": true,
                  "workingDirectory": "/app",
                  "entryPoint": ["node"],
                  "command": ["dist/src/main.js"],
                  "portMappings": [
                    {
                      "containerPort": 3000,
                      "protocol": "tcp"
                    }
                  ],
                  "environment": [
                    {
                      "name": "PORT",
                      "value": "3000"
                    },
                    {
                      "name": "NODE_ENV",
                      "value": "$env"
                    },
                    {
                      "name": "AWS_REGION",
                      "value": "'"${{ env.AWS_REGION }}"'"
                    }
                  ],
                  "secrets": [
                    {
                      "name": "DATABASE_URL",
                      "valueFrom": "'"${{ steps.secrets.outputs.db_connection_arn }}"'"
                    },
                    {
                      "name": "REDIS_URL",
                      "valueFrom": "'"${{ steps.secrets.outputs.redis_connection_arn }}"'"
                    },
                    {
                      "name": "JWT_SECRET",
                      "valueFrom": "'"${{ steps.secrets.outputs.jwt_secret_arn }}"'"
                    },
                    {
                      "name": "COGNITO_USER_POOL_ID",
                      "valueFrom": "'"${{ steps.secrets.outputs.cognito_config_arn }}"':COGNITO_USER_POOL_ID::"
                    },
                    {
                      "name": "COGNITO_CLIENT_ID",
                      "valueFrom": "'"${{ steps.secrets.outputs.cognito_config_arn }}"':COGNITO_CLIENT_ID::"
                    },
                    {
                      "name": "COGNITO_CLIENT_USER_POOL_ID",
                      "valueFrom": "'"${{ steps.secrets.outputs.cognito_config_arn }}"':COGNITO_CLIENT_USER_POOL_ID::"
                    },
                    {
                      "name": "COGNITO_CLIENT_CLIENT_ID",
                      "valueFrom": "'"${{ steps.secrets.outputs.cognito_config_arn }}"':COGNITO_CLIENT_CLIENT_ID::"
                    },
                    {
                      "name": "COGNITO_ADMIN_USER_POOL_ID",
                      "valueFrom": "'"${{ steps.secrets.outputs.cognito_config_arn }}"':COGNITO_ADMIN_USER_POOL_ID::"
                    },
                    {
                      "name": "COGNITO_ADMIN_CLIENT_ID",
                      "valueFrom": "'"${{ steps.secrets.outputs.cognito_config_arn }}"':COGNITO_ADMIN_CLIENT_ID::"
                    }
                  ],
                  "logConfiguration": {
                    "logDriver": "awslogs",
                    "options": {
                      "awslogs-group": "/finefinds/$env/app",
                      "awslogs-region": "'"${{ env.AWS_REGION }}"'",
                      "awslogs-stream-prefix": "finefinds"
                    }
                  }
                }
              ]
            }
            EOF
          }
          
          # Create task definition based on environment
          create_task_definition "${{ env.SERVICES_ENV }}" "${{ env.TASK_DEF_FAMILY_DEV }}"
          
          # Register task definition
          echo "Registering task definition..."
          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file://task-definition.json --query 'taskDefinition.taskDefinitionArn' --output text)
          if [ -z "$NEW_TASK_DEF_ARN" ]; then
            echo "::error::Failed to register task definition"
            exit 1
          fi
          echo "task_def_arn=$NEW_TASK_DEF_ARN" >> $GITHUB_OUTPUT

      - name: Deploy to ECS
        run: |
          echo "Updating ECS service..."
          aws ecs update-service \
            --cluster ${{ env.CLUSTER_NAME_DEV }} \
            --service ${{ env.SERVICE_NAME_DEV }} \
            --task-definition ${{ steps.task_def.outputs.task_def_arn }}
            
          echo "Waiting for service to stabilize..."
          aws ecs wait services-stable \
            --cluster ${{ env.CLUSTER_NAME_DEV }} \
            --services ${{ env.SERVICE_NAME_DEV }}
            
          echo "Deployment completed successfully"

  deploy-qa:
    needs: build-and-push
    if: ${{ !contains(github.event.head_commit.message, '[skip deploy]') && (github.ref == 'refs/heads/qa' || github.event.pull_request.base.ref == 'qa' || (github.event_name == 'workflow_dispatch' && inputs.environment == 'qa')) }}
    runs-on: ubuntu-latest
    environment: qa
    permissions:
      id-token: write
      contents: read
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download version file
        uses: actions/download-artifact@v4
        with:
          name: version
          
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-services-${{ github.ref_name == 'main' && 'prod' || github.ref_name }}
          aws-region: ${{ env.AWS_REGION }}
          role-duration-seconds: 3600
          
      - name: Get Secret ARNs
        id: secrets
        run: |
          echo "Fetching Secret ARNs..."
          
          # Function to get secret ARN with retry
          get_secret_arn() {
            local secret_name=$1
            local max_attempts=3
            local attempt=1
            local secret_arn=""
            
            while [ $attempt -le $max_attempts ]; do
              echo "Attempt $attempt of $max_attempts to get ARN for $secret_name"
              secret_arn=$(aws secretsmanager get-secret-value --secret-id "$secret_name" --query 'ARN' --output text)
              
              if [ $? -eq 0 ] && [ ! -z "$secret_arn" ]; then
                echo "Successfully got ARN for $secret_name"
                echo "$secret_arn"
                return 0
              fi
              
              echo "Failed to get ARN for $secret_name. Retrying..."
              sleep 5
              attempt=$((attempt + 1))
            done
            
            echo "::error::Failed to get ARN for $secret_name after $max_attempts attempts"
            return 1
          }
          
          # Function to verify secret access
          verify_secret_access() {
            local secret_name=$1
            local max_attempts=3
            local attempt=1
            
            while [ $attempt -le $max_attempts ]; do
              echo "Attempt $attempt of $max_attempts to verify access to secret: $secret_name"
              if aws secretsmanager describe-secret --secret-id "$secret_name" > /dev/null; then
                echo "Successfully verified access to secret: $secret_name"
                return 0
              fi
              
              echo "Failed to verify access to secret: $secret_name. Retrying..."
              sleep 5
              attempt=$((attempt + 1))
            done
            
            echo "::error::Failed to verify access to secret: $secret_name after $max_attempts attempts"
            return 1
          }
          
          # Get DB Connection Secret ARN
          DB_CONNECTION_ARN=$(get_secret_arn "finefinds-qa-db-connection")
          if [ $? -ne 0 ]; then exit 1; fi
          echo "db_connection_arn=$DB_CONNECTION_ARN" >> $GITHUB_OUTPUT
          
          # Get Redis Connection Secret ARN
          REDIS_CONNECTION_ARN=$(get_secret_arn "finefinds-qa-redis-connection")
          if [ $? -ne 0 ]; then exit 1; fi
          echo "redis_connection_arn=$REDIS_CONNECTION_ARN" >> $GITHUB_OUTPUT
          
          # Get Cognito Config Secret ARN
          COGNITO_CONFIG_ARN=$(get_secret_arn "finefinds-qa-cognito-config")
          if [ $? -ne 0 ]; then exit 1; fi
          echo "cognito_config_arn=$COGNITO_CONFIG_ARN" >> $GITHUB_OUTPUT
          
          # Get JWT Secret ARN
          JWT_SECRET_ARN=$(get_secret_arn "finefinds-qa-jwt")
          if [ $? -ne 0 ]; then exit 1; fi
          echo "jwt_secret_arn=$JWT_SECRET_ARN" >> $GITHUB_OUTPUT
          
          # Verify all secrets exist and are accessible
          echo "Verifying secret access..."
          for secret_arn in "$DB_CONNECTION_ARN" "$REDIS_CONNECTION_ARN" "$COGNITO_CONFIG_ARN" "$JWT_SECRET_ARN"; do
            if ! verify_secret_access "$secret_arn"; then
              exit 1
            fi
          done
          
          echo "All secrets verified successfully"

      - name: Create Task Definition
        id: task_def
        run: |
          VERSION=$(cat version.txt)
          
          # Function to create task definition JSON
          create_task_definition() {
            local env=$1
            local task_def_family=$2
            local execution_role="finefinds-$env-ecs-execution-role"
            local task_role="finefinds-$env-ecs-task-role"
            
            cat << EOF > task-definition.json
            {
              "family": "$task_def_family",
              "networkMode": "awsvpc",
              "requiresCompatibilities": ["FARGATE"],
              "cpu": "256",
              "memory": "512",
              "executionRoleArn": "arn:aws:iam::'"${{ secrets.AWS_ACCOUNT_ID }}"':role/$execution_role",
              "taskRoleArn": "arn:aws:iam::'"${{ secrets.AWS_ACCOUNT_ID }}"':role/$task_role",
              "runtimePlatform": {
                "operatingSystemFamily": "LINUX",
                "cpuArchitecture": "X86_64"
              },
              "proxyConfiguration": {
                "type": "APPMESH",
                "containerName": "envoy",
                "properties": [
                  {
                    "name": "IgnoredUID",
                    "value": "1337"
                  },
                  {
                    "name": "ProxyIngressPort",
                    "value": "15000"
                  },
                  {
                    "name": "ProxyEgressPort",
                    "value": "15001"
                  },
                  {
                    "name": "AppPorts",
                    "value": "3000"
                  },
                  {
                    "name": "EgressIgnoredIPs",
                    "value": "169.254.170.2,169.254.169.254"
                  }
                ]
              },
              "containerDefinitions": [
                {
                  "name": "AppContainer",
                  "image": "891076991993.dkr.ecr.us-east-1.amazonaws.com/'"${{ env.ECR_REPOSITORY_BACKEND }}"':'"$VERSION"'",
                  "essential": true,
                  "workingDirectory": "/app",
                  "entryPoint": ["node"],
                  "command": ["dist/src/main.js"],
                  "portMappings": [
                    {
                      "containerPort": 3000,
                      "protocol": "tcp"
                    }
                  ],
                  "environment": [
                    {
                      "name": "PORT",
                      "value": "3000"
                    },
                    {
                      "name": "NODE_ENV",
                      "value": "$env"
                    },
                    {
                      "name": "AWS_REGION",
                      "value": "'"${{ env.AWS_REGION }}"'"
                    }
                  ],
                  "secrets": [
                    {
                      "name": "DATABASE_URL",
                      "valueFrom": "'"${{ steps.secrets.outputs.db_connection_arn }}"'"
                    },
                    {
                      "name": "REDIS_URL",
                      "valueFrom": "'"${{ steps.secrets.outputs.redis_connection_arn }}"'"
                    },
                    {
                      "name": "JWT_SECRET",
                      "valueFrom": "'"${{ steps.secrets.outputs.jwt_secret_arn }}"'"
                    },
                    {
                      "name": "COGNITO_USER_POOL_ID",
                      "valueFrom": "'"${{ steps.secrets.outputs.cognito_config_arn }}"':COGNITO_USER_POOL_ID::"
                    },
                    {
                      "name": "COGNITO_CLIENT_ID",
                      "valueFrom": "'"${{ steps.secrets.outputs.cognito_config_arn }}"':COGNITO_CLIENT_ID::"
                    },
                    {
                      "name": "COGNITO_CLIENT_USER_POOL_ID",
                      "valueFrom": "'"${{ steps.secrets.outputs.cognito_config_arn }}"':COGNITO_CLIENT_USER_POOL_ID::"
                    },
                    {
                      "name": "COGNITO_CLIENT_CLIENT_ID",
                      "valueFrom": "'"${{ steps.secrets.outputs.cognito_config_arn }}"':COGNITO_CLIENT_CLIENT_ID::"
                    },
                    {
                      "name": "COGNITO_ADMIN_USER_POOL_ID",
                      "valueFrom": "'"${{ steps.secrets.outputs.cognito_config_arn }}"':COGNITO_ADMIN_USER_POOL_ID::"
                    },
                    {
                      "name": "COGNITO_ADMIN_CLIENT_ID",
                      "valueFrom": "'"${{ steps.secrets.outputs.cognito_config_arn }}"':COGNITO_ADMIN_CLIENT_ID::"
                    }
                  ],
                  "logConfiguration": {
                    "logDriver": "awslogs",
                    "options": {
                      "awslogs-group": "/finefinds/$env/app",
                      "awslogs-region": "'"${{ env.AWS_REGION }}"'",
                      "awslogs-stream-prefix": "finefinds"
                    }
                  }
                }
              ]
            }
            EOF
          }
          
          # Create task definition based on environment
          create_task_definition "qa" "${{ env.TASK_DEF_FAMILY_QA }}"
          
          # Register task definition
          echo "Registering task definition..."
          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file://task-definition.json --query 'taskDefinition.taskDefinitionArn' --output text)
          if [ -z "$NEW_TASK_DEF_ARN" ]; then
            echo "::error::Failed to register task definition"
            exit 1
          fi
          echo "task_def_arn=$NEW_TASK_DEF_ARN" >> $GITHUB_OUTPUT

      - name: Deploy to ECS
        run: |
          echo "Updating ECS service..."
          aws ecs update-service \
            --cluster ${{ env.CLUSTER_NAME_QA }} \
            --service ${{ env.SERVICE_NAME_QA }} \
            --task-definition ${{ steps.task_def.outputs.task_def_arn }}
            
          echo "Waiting for service to stabilize..."
          aws ecs wait services-stable \
            --cluster ${{ env.CLUSTER_NAME_QA }} \
            --services ${{ env.SERVICE_NAME_QA }}
            
          # Add health check after deployment
          echo "Performing health check..."
          max_attempts=30
          attempt=1
          while [ $attempt -le $max_attempts ]; do
            echo "Health check attempt $attempt of $max_attempts"
            if aws ecs describe-services \
              --cluster ${{ env.CLUSTER_NAME_QA }} \
              --services ${{ env.SERVICE_NAME_QA }} \
              --query 'services[0].runningCount' \
              --output text | grep -q "1"; then
              echo "Service is healthy"
              break
            fi
            echo "Service not healthy yet. Waiting..."
            sleep 10
            attempt=$((attempt + 1))
          done
          
          if [ $attempt -gt $max_attempts ]; then
            echo "::error::Service failed to become healthy after $max_attempts attempts"
            exit 1
          fi
          
          echo "Deployment completed successfully"

  deploy-staging:
    needs: build-and-push
    if: ${{ !contains(github.event.head_commit.message, '[skip deploy]') && (github.ref == 'refs/heads/staging' || github.event.pull_request.base.ref == 'staging' || (github.event_name == 'workflow_dispatch' && inputs.environment == 'staging')) }}
    runs-on: ubuntu-latest
    environment: staging
    permissions:
      id-token: write
      contents: read
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download version file
        uses: actions/download-artifact@v4
        with:
          name: version
          
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-services-${{ github.ref_name == 'main' && 'prod' || github.ref_name }}
          aws-region: ${{ env.AWS_REGION }}
          role-duration-seconds: 3600
          
      - name: Get Secret ARNs
        id: secrets
        run: |
          echo "Fetching Secret ARNs..."
          
          # Function to get secret ARN with retry
          get_secret_arn() {
            local secret_name=$1
            local max_attempts=3
            local attempt=1
            local secret_arn=""
            
            while [ $attempt -le $max_attempts ]; do
              echo "Attempt $attempt of $max_attempts to get ARN for $secret_name"
              secret_arn=$(aws secretsmanager get-secret-value --secret-id "$secret_name" --query 'ARN' --output text)
              
              if [ $? -eq 0 ] && [ ! -z "$secret_arn" ]; then
                echo "Successfully got ARN for $secret_name"
                echo "$secret_arn"
                return 0
              fi
              
              echo "Failed to get ARN for $secret_name. Retrying..."
              sleep 5
              attempt=$((attempt + 1))
            done
            
            echo "::error::Failed to get ARN for $secret_name after $max_attempts attempts"
            return 1
          }
          
          # Function to verify secret access
          verify_secret_access() {
            local secret_name=$1
            local max_attempts=3
            local attempt=1
            
            while [ $attempt -le $max_attempts ]; do
              echo "Attempt $attempt of $max_attempts to verify access to secret: $secret_name"
              if aws secretsmanager describe-secret --secret-id "$secret_name" > /dev/null; then
                echo "Successfully verified access to secret: $secret_name"
                return 0
              fi
              
              echo "Failed to verify access to secret: $secret_name. Retrying..."
              sleep 5
              attempt=$((attempt + 1))
            done
            
            echo "::error::Failed to verify access to secret: $secret_name after $max_attempts attempts"
            return 1
          }
          
          # Get DB Connection Secret ARN
          DB_CONNECTION_ARN=$(get_secret_arn "finefinds-staging-db-connection")
          if [ $? -ne 0 ]; then exit 1; fi
          echo "db_connection_arn=$DB_CONNECTION_ARN" >> $GITHUB_OUTPUT
          
          # Get Redis Connection Secret ARN
          REDIS_CONNECTION_ARN=$(get_secret_arn "finefinds-staging-redis-connection")
          if [ $? -ne 0 ]; then exit 1; fi
          echo "redis_connection_arn=$REDIS_CONNECTION_ARN" >> $GITHUB_OUTPUT
          
          # Get Cognito Config Secret ARN
          COGNITO_CONFIG_ARN=$(get_secret_arn "finefinds-staging-cognito-config")
          if [ $? -ne 0 ]; then exit 1; fi
          echo "cognito_config_arn=$COGNITO_CONFIG_ARN" >> $GITHUB_OUTPUT
          
          # Get JWT Secret ARN
          JWT_SECRET_ARN=$(get_secret_arn "finefinds-staging-jwt")
          if [ $? -ne 0 ]; then exit 1; fi
          echo "jwt_secret_arn=$JWT_SECRET_ARN" >> $GITHUB_OUTPUT
          
          # Verify all secrets exist and are accessible
          echo "Verifying secret access..."
          for secret_arn in "$DB_CONNECTION_ARN" "$REDIS_CONNECTION_ARN" "$COGNITO_CONFIG_ARN" "$JWT_SECRET_ARN"; do
            if ! verify_secret_access "$secret_arn"; then
              exit 1
            fi
          done
          
          echo "All secrets verified successfully"

      - name: Create Task Definition
        id: task_def
        run: |
          VERSION=$(cat version.txt)
          
          # Function to create task definition JSON
          create_task_definition() {
            local env=$1
            local task_def_family=$2
            local execution_role="finefinds-$env-ecs-execution-role"
            local task_role="finefinds-$env-ecs-task-role"
            
            cat << EOF > task-definition.json
            {
              "family": "$task_def_family",
              "networkMode": "awsvpc",
              "requiresCompatibilities": ["FARGATE"],
              "cpu": "256",
              "memory": "512",
              "executionRoleArn": "arn:aws:iam::'"${{ secrets.AWS_ACCOUNT_ID }}"':role/$execution_role",
              "taskRoleArn": "arn:aws:iam::'"${{ secrets.AWS_ACCOUNT_ID }}"':role/$task_role",
              "runtimePlatform": {
                "operatingSystemFamily": "LINUX",
                "cpuArchitecture": "X86_64"
              },
              "proxyConfiguration": {
                "type": "APPMESH",
                "containerName": "envoy",
                "properties": [
                  {
                    "name": "IgnoredUID",
                    "value": "1337"
                  },
                  {
                    "name": "ProxyIngressPort",
                    "value": "15000"
                  },
                  {
                    "name": "ProxyEgressPort",
                    "value": "15001"
                  },
                  {
                    "name": "AppPorts",
                    "value": "3000"
                  },
                  {
                    "name": "EgressIgnoredIPs",
                    "value": "169.254.170.2,169.254.169.254"
                  }
                ]
              },
              "containerDefinitions": [
                {
                  "name": "AppContainer",
                  "image": "891076991993.dkr.ecr.us-east-1.amazonaws.com/'"${{ env.ECR_REPOSITORY_BACKEND }}"':'"$VERSION"'",
                  "essential": true,
                  "workingDirectory": "/app",
                  "entryPoint": ["node"],
                  "command": ["dist/src/main.js"],
                  "portMappings": [
                    {
                      "containerPort": 3000,
                      "protocol": "tcp"
                    }
                  ],
                  "environment": [
                    {
                      "name": "PORT",
                      "value": "3000"
                    },
                    {
                      "name": "NODE_ENV",
                      "value": "$env"
                    },
                    {
                      "name": "AWS_REGION",
                      "value": "'"${{ env.AWS_REGION }}"'"
                    }
                  ],
                  "secrets": [
                    {
                      "name": "DATABASE_URL",
                      "valueFrom": "'"${{ steps.secrets.outputs.db_connection_arn }}"'"
                    },
                    {
                      "name": "REDIS_URL",
                      "valueFrom": "'"${{ steps.secrets.outputs.redis_connection_arn }}"'"
                    },
                    {
                      "name": "JWT_SECRET",
                      "valueFrom": "'"${{ steps.secrets.outputs.jwt_secret_arn }}"'"
                    },
                    {
                      "name": "COGNITO_USER_POOL_ID",
                      "valueFrom": "'"${{ steps.secrets.outputs.cognito_config_arn }}"':COGNITO_USER_POOL_ID::"
                    },
                    {
                      "name": "COGNITO_CLIENT_ID",
                      "valueFrom": "'"${{ steps.secrets.outputs.cognito_config_arn }}"':COGNITO_CLIENT_ID::"
                    },
                    {
                      "name": "COGNITO_CLIENT_USER_POOL_ID",
                      "valueFrom": "'"${{ steps.secrets.outputs.cognito_config_arn }}"':COGNITO_CLIENT_USER_POOL_ID::"
                    },
                    {
                      "name": "COGNITO_CLIENT_CLIENT_ID",
                      "valueFrom": "'"${{ steps.secrets.outputs.cognito_config_arn }}"':COGNITO_CLIENT_CLIENT_ID::"
                    },
                    {
                      "name": "COGNITO_ADMIN_USER_POOL_ID",
                      "valueFrom": "'"${{ steps.secrets.outputs.cognito_config_arn }}"':COGNITO_ADMIN_USER_POOL_ID::"
                    },
                    {
                      "name": "COGNITO_ADMIN_CLIENT_ID",
                      "valueFrom": "'"${{ steps.secrets.outputs.cognito_config_arn }}"':COGNITO_ADMIN_CLIENT_ID::"
                    }
                  ],
                  "logConfiguration": {
                    "logDriver": "awslogs",
                    "options": {
                      "awslogs-group": "/finefinds/$env/app",
                      "awslogs-region": "'"${{ env.AWS_REGION }}"'",
                      "awslogs-stream-prefix": "finefinds"
                    }
                  }
                }
              ]
            }
            EOF
          }
          
          # Create task definition based on environment
          create_task_definition "staging" "${{ env.TASK_DEF_FAMILY_STAGING }}"
          
          # Register task definition
          echo "Registering task definition..."
          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file://task-definition.json --query 'taskDefinition.taskDefinitionArn' --output text)
          if [ -z "$NEW_TASK_DEF_ARN" ]; then
            echo "::error::Failed to register task definition"
            exit 1
          fi
          echo "task_def_arn=$NEW_TASK_DEF_ARN" >> $GITHUB_OUTPUT

      - name: Deploy to ECS
        run: |
          echo "Updating ECS service..."
          aws ecs update-service \
            --cluster ${{ env.CLUSTER_NAME_STAGING }} \
            --service ${{ env.SERVICE_NAME_STAGING }} \
            --task-definition ${{ steps.task_def.outputs.task_def_arn }}
            
          echo "Waiting for service to stabilize..."
          aws ecs wait services-stable \
            --cluster ${{ env.CLUSTER_NAME_STAGING }} \
            --services ${{ env.SERVICE_NAME_STAGING }}
            
          echo "Deployment completed successfully"

  deploy-prod:
    needs: build-and-push
    if: ${{ !contains(github.event.head_commit.message, '[skip deploy]') && (github.ref == 'refs/heads/main' || github.event.pull_request.base.ref == 'main' || (github.event_name == 'workflow_dispatch' && inputs.environment == 'prod')) }}
    runs-on: ubuntu-latest
    environment: prod
    permissions:
      id-token: write
      contents: read
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download version file
        uses: actions/download-artifact@v4
        with:
          name: version
          
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-services-${{ github.ref_name == 'main' && 'prod' || github.ref_name }}
          aws-region: ${{ env.AWS_REGION }}
          role-duration-seconds: 3600
          
      - name: Get Secret ARNs
        id: secrets
        run: |
          echo "Fetching Secret ARNs..."
          
          # Function to get secret ARN with retry
          get_secret_arn() {
            local secret_name=$1
            local max_attempts=3
            local attempt=1
            local secret_arn=""
            
            while [ $attempt -le $max_attempts ]; do
              echo "Attempt $attempt of $max_attempts to get ARN for $secret_name"
              secret_arn=$(aws secretsmanager get-secret-value --secret-id "$secret_name" --query 'ARN' --output text)
              
              if [ $? -eq 0 ] && [ ! -z "$secret_arn" ]; then
                echo "Successfully got ARN for $secret_name"
                echo "$secret_arn"
                return 0
              fi
              
              echo "Failed to get ARN for $secret_name. Retrying..."
              sleep 5
              attempt=$((attempt + 1))
            done
            
            echo "::error::Failed to get ARN for $secret_name after $max_attempts attempts"
            return 1
          }
          
          # Function to verify secret access
          verify_secret_access() {
            local secret_name=$1
            local max_attempts=3
            local attempt=1
            
            while [ $attempt -le $max_attempts ]; do
              echo "Attempt $attempt of $max_attempts to verify access to secret: $secret_name"
              if aws secretsmanager describe-secret --secret-id "$secret_name" > /dev/null; then
                echo "Successfully verified access to secret: $secret_name"
                return 0
              fi
              
              echo "Failed to verify access to secret: $secret_name. Retrying..."
              sleep 5
              attempt=$((attempt + 1))
            done
            
            echo "::error::Failed to verify access to secret: $secret_name after $max_attempts attempts"
            return 1
          }
          
          # Get DB Connection Secret ARN
          DB_CONNECTION_ARN=$(get_secret_arn "finefinds-prod-db-connection")
          if [ $? -ne 0 ]; then exit 1; fi
          echo "db_connection_arn=$DB_CONNECTION_ARN" >> $GITHUB_OUTPUT
          
          # Get Redis Connection Secret ARN
          REDIS_CONNECTION_ARN=$(get_secret_arn "finefinds-prod-redis-connection")
          if [ $? -ne 0 ]; then exit 1; fi
          echo "redis_connection_arn=$REDIS_CONNECTION_ARN" >> $GITHUB_OUTPUT
          
          # Get Cognito Config Secret ARN
          COGNITO_CONFIG_ARN=$(get_secret_arn "finefinds-prod-cognito-config")
          if [ $? -ne 0 ]; then exit 1; fi
          echo "cognito_config_arn=$COGNITO_CONFIG_ARN" >> $GITHUB_OUTPUT
          
          # Get JWT Secret ARN
          JWT_SECRET_ARN=$(get_secret_arn "finefinds-prod-jwt")
          if [ $? -ne 0 ]; then exit 1; fi
          echo "jwt_secret_arn=$JWT_SECRET_ARN" >> $GITHUB_OUTPUT
          
          # Verify all secrets exist and are accessible
          echo "Verifying secret access..."
          for secret_arn in "$DB_CONNECTION_ARN" "$REDIS_CONNECTION_ARN" "$COGNITO_CONFIG_ARN" "$JWT_SECRET_ARN"; do
            if ! verify_secret_access "$secret_arn"; then
              exit 1
            fi
          done
          
          echo "All secrets verified successfully"

      - name: Create Task Definition
        id: task_def
        run: |
          VERSION=$(cat version.txt)
          
          # Function to create task definition JSON
          create_task_definition() {
            local env=$1
            local task_def_family=$2
            local execution_role="finefinds-$env-ecs-execution-role"
            local task_role="finefinds-$env-ecs-task-role"
            
            cat << EOF > task-definition.json
            {
              "family": "$task_def_family",
              "networkMode": "awsvpc",
              "requiresCompatibilities": ["FARGATE"],
              "cpu": "256",
              "memory": "512",
              "executionRoleArn": "arn:aws:iam::'"${{ secrets.AWS_ACCOUNT_ID }}"':role/$execution_role",
              "taskRoleArn": "arn:aws:iam::'"${{ secrets.AWS_ACCOUNT_ID }}"':role/$task_role",
              "runtimePlatform": {
                "operatingSystemFamily": "LINUX",
                "cpuArchitecture": "X86_64"
              },
              "proxyConfiguration": {
                "type": "APPMESH",
                "containerName": "envoy",
                "properties": [
                  {
                    "name": "IgnoredUID",
                    "value": "1337"
                  },
                  {
                    "name": "ProxyIngressPort",
                    "value": "15000"
                  },
                  {
                    "name": "ProxyEgressPort",
                    "value": "15001"
                  },
                  {
                    "name": "AppPorts",
                    "value": "3000"
                  },
                  {
                    "name": "EgressIgnoredIPs",
                    "value": "169.254.170.2,169.254.169.254"
                  }
                ]
              },
              "containerDefinitions": [
                {
                  "name": "AppContainer",
                  "image": "891076991993.dkr.ecr.us-east-1.amazonaws.com/'"${{ env.ECR_REPOSITORY_BACKEND }}"':'"$VERSION"'",
                  "essential": true,
                  "workingDirectory": "/app",
                  "entryPoint": ["node"],
                  "command": ["dist/src/main.js"],
                  "portMappings": [
                    {
                      "containerPort": 3000,
                      "protocol": "tcp"
                    }
                  ],
                  "environment": [
                    {
                      "name": "PORT",
                      "value": "3000"
                    },
                    {
                      "name": "NODE_ENV",
                      "value": "$env"
                    },
                    {
                      "name": "AWS_REGION",
                      "value": "'"${{ env.AWS_REGION }}"'"
                    }
                  ],
                  "secrets": [
                    {
                      "name": "DATABASE_URL",
                      "valueFrom": "'"${{ steps.secrets.outputs.db_connection_arn }}"'"
                    },
                    {
                      "name": "REDIS_URL",
                      "valueFrom": "'"${{ steps.secrets.outputs.redis_connection_arn }}"'"
                    },
                    {
                      "name": "JWT_SECRET",
                      "valueFrom": "'"${{ steps.secrets.outputs.jwt_secret_arn }}"'"
                    },
                    {
                      "name": "COGNITO_USER_POOL_ID",
                      "valueFrom": "'"${{ steps.secrets.outputs.cognito_config_arn }}"':COGNITO_USER_POOL_ID::"
                    },
                    {
                      "name": "COGNITO_CLIENT_ID",
                      "valueFrom": "'"${{ steps.secrets.outputs.cognito_config_arn }}"':COGNITO_CLIENT_ID::"
                    },
                    {
                      "name": "COGNITO_CLIENT_USER_POOL_ID",
                      "valueFrom": "'"${{ steps.secrets.outputs.cognito_config_arn }}"':COGNITO_CLIENT_USER_POOL_ID::"
                    },
                    {
                      "name": "COGNITO_CLIENT_CLIENT_ID",
                      "valueFrom": "'"${{ steps.secrets.outputs.cognito_config_arn }}"':COGNITO_CLIENT_CLIENT_ID::"
                    },
                    {
                      "name": "COGNITO_ADMIN_USER_POOL_ID",
                      "valueFrom": "'"${{ steps.secrets.outputs.cognito_config_arn }}"':COGNITO_ADMIN_USER_POOL_ID::"
                    },
                    {
                      "name": "COGNITO_ADMIN_CLIENT_ID",
                      "valueFrom": "'"${{ steps.secrets.outputs.cognito_config_arn }}"':COGNITO_ADMIN_CLIENT_ID::"
                    }
                  ],
                  "logConfiguration": {
                    "logDriver": "awslogs",
                    "options": {
                      "awslogs-group": "/finefinds/$env/app",
                      "awslogs-region": "'"${{ env.AWS_REGION }}"'",
                      "awslogs-stream-prefix": "finefinds"
                    }
                  }
                }
              ]
            }
            EOF
          }
          
          # Create task definition based on environment
          create_task_definition "prod" "${{ env.TASK_DEF_FAMILY_PROD }}"
          
          # Register task definition
          echo "Registering task definition..."
          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file://task-definition.json --query 'taskDefinition.taskDefinitionArn' --output text)
          if [ -z "$NEW_TASK_DEF_ARN" ]; then
            echo "::error::Failed to register task definition"
            exit 1
          fi
          echo "task_def_arn=$NEW_TASK_DEF_ARN" >> $GITHUB_OUTPUT

      - name: Deploy to ECS
        run: |
          echo "Updating ECS service..."
          aws ecs update-service \
            --cluster ${{ env.CLUSTER_NAME_PROD }} \
            --service ${{ env.SERVICE_NAME_PROD }} \
            --task-definition ${{ steps.task_def.outputs.task_def_arn }}
            
          echo "Waiting for service to stabilize..."
          aws ecs wait services-stable \
            --cluster ${{ env.CLUSTER_NAME_PROD }} \
            --services ${{ env.SERVICE_NAME_PROD }}
            
          echo "Deployment completed successfully"

  notify:
    needs: [deploy-sandbox, deploy-dev, deploy-qa, deploy-staging, deploy-prod]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Slack Notification (Success)
        if: success()
        uses: slackapi/slack-github-action@v2.1.0
        with:
          webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
          webhook-type: webhook-trigger
          payload: |
            {
              "channel": "${{ secrets.SLACK_CHANNEL }}",
              "attachments": [
                {
                  "color": "#36a64f",
                  "pretext": ":white_check_mark: *Backend Services Deployment Succeeded*",
                  "fields": [
                    { "title": "Environment", "value": "${{ env.SERVICES_ENV }}", "short": true },
                    { "title": "Branch", "value": "${{ github.ref_name }}", "short": true },
                    { "title": "Actor", "value": "${{ github.actor }}", "short": true },
                    { "title": "Commit", "value": "${{ github.sha }}", "short": false },
                    { "title": "Task Definition", "value": "${{ needs.deploy-dev.outputs.task_def_arn || needs.deploy-qa.outputs.task_def_arn || needs.deploy-staging.outputs.task_def_arn || needs.deploy-prod.outputs.task_def_arn || 'N/A' }}", "short": false }
                  ],
                  "actions": [
                    {
                      "type": "button",
                      "text": "View Workflow",
                      "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                    }
                  ]
                }
              ]
            }

      - name: Slack Notification (Failure)
        if: failure()
        uses: slackapi/slack-github-action@v2.1.0
        with:
          webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
          webhook-type: webhook-trigger
          payload: |
            {
              "channel": "${{ secrets.SLACK_CHANNEL }}",
              "attachments": [
                {
                  "color": "#ff0000",
                  "pretext": ":x: *Backend Services Deployment Failed*",
                  "fields": [
                    { "title": "Environment", "value": "${{ env.SERVICES_ENV }}", "short": true },
                    { "title": "Branch", "value": "${{ github.ref_name }}", "short": true },
                    { "title": "Actor", "value": "${{ github.actor }}", "short": true },
                    { "title": "Commit", "value": "${{ github.sha }}", "short": false },
                    { "title": "Failed Job", "value": "${{ needs.deploy-sandbox.result == 'failure' && 'deploy-sandbox' || needs.deploy-dev.result == 'failure' && 'deploy-dev' || needs.deploy-qa.result == 'failure' && 'deploy-qa' || needs.deploy-staging.result == 'failure' && 'deploy-staging' || needs.deploy-prod.result == 'failure' && 'deploy-prod' || 'None' }}", "short": false }
                  ],
                  "actions": [
                    {
                      "type": "button",
                      "text": "View Workflow",
                      "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                    }
                  ]
                }
              ]
            } 