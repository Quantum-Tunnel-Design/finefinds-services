name: Backend Service Deployment

on:
  push:
    branches:
      - dev
      - qa
      - staging
      - main
  pull_request:
    types: [closed]
    branches:
      - main
      - staging
      - qa
      - dev
      - sandbox
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to deploy'
        required: true
        type: choice
        options:
          - dev
          - qa
          - staging
          - main
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - dev
          - qa
          - staging
          - prod
      skip_deploy:
        description: 'Skip deployment (only build and push)'
        required: false
        type: boolean
        default: false

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: finefindslk/base/node-services
  SERVICES_ENV: >-
    ${{ github.event_name == 'workflow_dispatch' && inputs.environment || 
    github.ref == 'refs/heads/main' && 'prod' || 
    github.ref == 'refs/heads/staging' && 'staging' || 
    github.ref == 'refs/heads/qa' && 'qa' || 
    github.ref == 'refs/heads/dev' && 'dev' ||
    'sandbox' }}
  ECR_REPOSITORY_BACKEND: finefinds-services-${{ github.event_name == 'workflow_dispatch' && inputs.environment || github.ref == 'refs/heads/main' && 'prod' || github.ref == 'refs/heads/staging' && 'staging' || github.ref == 'refs/heads/qa' && 'qa' || github.ref == 'refs/heads/dev' && 'dev' || 'sandbox' }}

jobs:
  input_check:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Check for inputs to validate
        id: input_check
        run: |
          echo "Input Env: ${{inputs.environment }}"
          echo "Env: ${{env.SERVICES_ENV}}"
          echo "Branch: ${{inputs.branch}}"
          echo "Skip Deploy: ${{inputs.skip_deploy}}"
          echo "Role Id: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-finefinds-services-${{ github.ref_name == 'main' && 'prod' || github.ref_name }}"
          echo "Repository: ${{ github.repository }}"
          echo "Ref: ${{ github.ref }}"
          echo "Event Name: ${{ github.event_name }}"
          echo "Environment: ${{ github.event.repository.name }}"

  test:
    needs: input_check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run tests
        run: npm test
        
      - name: Build
        run: |
          npm run build
          echo "Contents of dist directory:"
          ls -la dist/
          echo "Contents of dist directory (recursive):"
          find dist/ -type f

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    if: ${{ !contains(github.event.head_commit.message, '[skip deploy]') }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-services-${{ github.ref_name == 'main' && 'prod' || github.ref_name }}
          aws-region: ${{ env.AWS_REGION }}
          role-duration-seconds: 3600
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        
      - name: Create ECR repository if not exists
        run: |
          aws ecr describe-repositories --repository-names ${{ env.ECR_REPOSITORY_BACKEND }} || \
          aws ecr create-repository --repository-name ${{ env.ECR_REPOSITORY_BACKEND }} --image-scanning-configuration scanOnPush=true
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Generate version
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            # Generate a version number that's compatible with ECS task definition revisions
            # Format: YYYYMMDD-{run_number}
            VERSION=$(date +'%Y%m%d')-${{ github.run_number }}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64
          build-args: |
            BUILDPLATFORM=linux/amd64
            TARGETPLATFORM=linux/amd64
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_BACKEND }}:${{ steps.version.outputs.version }}
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_BACKEND }}:${{ github.ref_name }}
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_BACKEND }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false
          sbom: false
          outputs: type=docker
          
      - name: Save version for deployment
        run: echo "${{ steps.version.outputs.version }}" > version.txt
        
      - name: Upload version file
        uses: actions/upload-artifact@v4
        with:
          name: version
          path: version.txt

  deploy-sandbox:
    needs: build-and-push
    if: ${{ !contains(github.event.head_commit.message, '[skip deploy]') && (github.ref == 'refs/heads/sandbox' || github.event.pull_request.base.ref == 'sandbox' || (github.event_name == 'workflow_dispatch' && inputs.environment == 'sandbox')) }}
    runs-on: ubuntu-latest
    environment: sandbox
    permissions:
      id-token: write
      contents: read
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download version file
        uses: actions/download-artifact@v4
        with:
          name: version

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-services-${{ github.ref_name == 'main' && 'prod' || github.ref_name }}
          aws-region: ${{ env.AWS_REGION }}
          role-duration-seconds: 3600
          
      - name: Deploy to ECS
        run: |
          VERSION=$(cat version.txt)
          aws ecs update-service \
            --cluster finefinds-sandbox \
            --service finefinds-backend \
            --force-new-deployment \
            --task-definition finefinds-backend:$VERSION

  deploy-dev:
    needs: build-and-push
    if: ${{ !contains(github.event.head_commit.message, '[skip deploy]') && (github.ref == 'refs/heads/dev' || github.event.pull_request.base.ref == 'dev' || (github.event_name == 'workflow_dispatch' && inputs.environment == 'dev')) }}
    runs-on: ubuntu-latest
    environment: dev
    permissions:
      id-token: write
      contents: read
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download version file
        uses: actions/download-artifact@v4
        with:
          name: version
          
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-services-${{ github.ref_name == 'main' && 'prod' || github.ref_name }}
          aws-region: ${{ env.AWS_REGION }}
          role-duration-seconds: 3600
          
      - name: Deploy to ECS
        run: |
          VERSION=$(cat version.txt)
          
          # Check if task definition exists
          TASK_DEF_ARN=$(aws ecs list-task-definitions --family-prefix FineFindsdevEcsTaskDef290F30C7 --sort DESC --max-items 1 --query 'taskDefinitionArns[0]' --output text || echo "None")
          
          if [ "$TASK_DEF_ARN" = "None" ] || [ -z "$TASK_DEF_ARN" ]; then
            echo "No existing task definition found. Creating new task definition..."
            # Create new task definition from scratch
            echo '{
              "family": "FineFindsdevEcsTaskDef290F30C7",
              "networkMode": "awsvpc",
              "requiresCompatibilities": ["FARGATE"],
              "cpu": "256",
              "memory": "512",
              "executionRoleArn": "arn:aws:iam::'"${{ secrets.AWS_ACCOUNT_ID }}"':role/finefinds-dev-ecs-execution-role",
              "taskRoleArn": "arn:aws:iam::'"${{ secrets.AWS_ACCOUNT_ID }}"':role/finefinds-dev-ecs-task-role",
              "containerDefinitions": [
                {
                  "name": "AppContainer",
                  "image": "891076991993.dkr.ecr.us-east-1.amazonaws.com/'"${{ env.ECR_REPOSITORY_BACKEND }}"':'"$VERSION"'",
                  "essential": true,
                  "workingDirectory": "/app",
                  "command": ["node", "dist/src/main.js"],
                  "portMappings": [
                    {
                      "containerPort": 3000,
                      "protocol": "tcp"
                    }
                  ],
                  "environment": [
                    {
                      "name": "PORT",
                      "value": "3000"
                    },
                    {
                      "name": "NODE_ENV",
                      "value": "dev"
                    },
                    {
                      "name": "AWS_REGION",
                      "value": "'"${{ env.AWS_REGION }}"'"
                    }
                  ],
                  "secrets": [
                    {
                      "name": "DATABASE_URL",
                      "valueFrom": "arn:aws:secretsmanager:us-east-1:'"${{ secrets.AWS_ACCOUNT_ID }}"':secret:finefinds-dev-db-connection"
                    },
                    {
                      "name": "REDIS_URL",
                      "valueFrom": "arn:aws:secretsmanager:us-east-1:'"${{ secrets.AWS_ACCOUNT_ID }}"':secret:finefinds-dev-redis-connection"
                    },
                    {
                      "name": "COGNITO_CLIENT_USER_POOL_ID",
                      "valueFrom": "arn:aws:secretsmanager:us-east-1:'"${{ secrets.AWS_ACCOUNT_ID }}"':secret:finefinds-dev-cognito-config-aVTNzm:COGNITO_CLIENT_USER_POOL_ID::"
                    },
                    {
                      "name": "COGNITO_CLIENT_CLIENT_ID",
                      "valueFrom": "arn:aws:secretsmanager:us-east-1:'"${{ secrets.AWS_ACCOUNT_ID }}"':secret:finefinds-dev-cognito-config-aVTNzm:COGNITO_CLIENT_CLIENT_ID::"
                    },
                    {
                      "name": "COGNITO_ADMIN_USER_POOL_ID",
                      "valueFrom": "arn:aws:secretsmanager:us-east-1:'"${{ secrets.AWS_ACCOUNT_ID }}"':secret:finefinds-dev-cognito-config-aVTNzm:COGNITO_ADMIN_USER_POOL_ID::"
                    },
                    {
                      "name": "COGNITO_ADMIN_CLIENT_ID",
                      "valueFrom": "arn:aws:secretsmanager:us-east-1:'"${{ secrets.AWS_ACCOUNT_ID }}"':secret:finefinds-dev-cognito-config-aVTNzm:COGNITO_ADMIN_CLIENT_ID::"
                    }
                  ],
                  "logConfiguration": {
                    "logDriver": "awslogs",
                    "options": {
                      "awslogs-group": "/finefinds/dev/app",
                      "awslogs-region": "'"${{ env.AWS_REGION }}"'",
                      "awslogs-stream-prefix": "finefinds"
                    }
                  }
                }
              ]
            }' > task-definition.json
            
            # Register the new task definition
            NEW_TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file://task-definition.json --query 'taskDefinition.taskDefinitionArn' --output text)
          else
            echo "Found existing task definition. Updating with new image..."
            # Get the latest revision
            LATEST_REVISION=$(echo $TASK_DEF_ARN | rev | cut -d: -f1 | rev | tr -d 'None')
            echo "Latest revision: $LATEST_REVISION"
            
            # Get the current task definition
            TASK_DEF=$(aws ecs describe-task-definition --task-definition finefinds-backend:$LATEST_REVISION --query 'taskDefinition' --output json || echo "{}")
            
            # Debug: Print existing task definition container name
            echo "Existing task definition container name:"
            echo "$TASK_DEF" | jq '.containerDefinitions[0].name'
            
            if [ "$TASK_DEF" = "{}" ]; then
              echo "Failed to get task definition. Creating new one..."
              # Create new task definition from scratch
              echo '{
                "family": "FineFindsdevEcsTaskDef290F30C7",
                "networkMode": "awsvpc",
                "requiresCompatibilities": ["FARGATE"],
                "cpu": "256",
                "memory": "512",
                "executionRoleArn": "arn:aws:iam::'"${{ secrets.AWS_ACCOUNT_ID }}"':role/finefinds-dev-ecs-execution-role",
                "taskRoleArn": "arn:aws:iam::'"${{ secrets.AWS_ACCOUNT_ID }}"':role/finefinds-dev-ecs-task-role",
                "containerDefinitions": [
                  {
                    "name": "AppContainer",
                    "image": "891076991993.dkr.ecr.us-east-1.amazonaws.com/'"${{ env.ECR_REPOSITORY_BACKEND }}"':'"$VERSION"'",
                    "essential": true,
                    "workingDirectory": "/app",
                    "command": ["node", "dist/src/main.js"],
                    "portMappings": [
                      {
                        "containerPort": 3000,
                        "protocol": "tcp"
                      }
                    ],
                    "environment": [
                      {
                        "name": "PORT",
                        "value": "3000"
                      },
                      {
                        "name": "NODE_ENV",
                        "value": "dev"
                      },
                      {
                        "name": "AWS_REGION",
                        "value": "'"${{ env.AWS_REGION }}"'"
                      }
                    ],
                    "secrets": [
                      {
                        "name": "DATABASE_URL",
                        "valueFrom": "arn:aws:secretsmanager:us-east-1:'"${{ secrets.AWS_ACCOUNT_ID }}"':secret:finefinds-dev-db-connection"
                      },
                      {
                        "name": "REDIS_URL",
                        "valueFrom": "arn:aws:secretsmanager:us-east-1:'"${{ secrets.AWS_ACCOUNT_ID }}"':secret:finefinds-dev-redis-connection"
                      },
                      {
                        "name": "COGNITO_CLIENT_USER_POOL_ID",
                        "valueFrom": "arn:aws:secretsmanager:us-east-1:'"${{ secrets.AWS_ACCOUNT_ID }}"':secret:finefinds-dev-cognito-config-aVTNzm:COGNITO_CLIENT_USER_POOL_ID::"
                      },
                      {
                        "name": "COGNITO_CLIENT_CLIENT_ID",
                        "valueFrom": "arn:aws:secretsmanager:us-east-1:'"${{ secrets.AWS_ACCOUNT_ID }}"':secret:finefinds-dev-cognito-config-aVTNzm:COGNITO_CLIENT_CLIENT_ID::"
                      },
                      {
                        "name": "COGNITO_ADMIN_USER_POOL_ID",
                        "valueFrom": "arn:aws:secretsmanager:us-east-1:'"${{ secrets.AWS_ACCOUNT_ID }}"':secret:finefinds-dev-cognito-config-aVTNzm:COGNITO_ADMIN_USER_POOL_ID::"
                      },
                      {
                        "name": "COGNITO_ADMIN_CLIENT_ID",
                        "valueFrom": "arn:aws:secretsmanager:us-east-1:'"${{ secrets.AWS_ACCOUNT_ID }}"':secret:finefinds-dev-cognito-config-aVTNzm:COGNITO_ADMIN_CLIENT_ID::"
                      }
                    ],
                    "logConfiguration": {
                      "logDriver": "awslogs",
                      "options": {
                        "awslogs-group": "/finefinds/dev/app",
                        "awslogs-region": "'"${{ env.AWS_REGION }}"'",
                        "awslogs-stream-prefix": "finefinds"
                      }
                    }
                  }
                ]
              }' > task-definition.json
              
              # Register the new task definition
              NEW_TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file://task-definition.json --query 'taskDefinition.taskDefinitionArn' --output text)
            else
              # Create new task definition with the new image
              NEW_TASK_DEF=$(echo $TASK_DEF | jq --arg IMAGE "891076991993.dkr.ecr.us-east-1.amazonaws.com/${{ env.ECR_REPOSITORY_BACKEND }}:$VERSION" '.containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.compatibilities) | del(.registeredAt) | del(.registeredBy)')
              
              # Debug: Print the task definition
              echo "New task definition:"
              echo "$NEW_TASK_DEF" | jq '.'
              
              # Register the new task definition
              NEW_TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json "$NEW_TASK_DEF" --query 'taskDefinition.taskDefinitionArn' --output text)
              
              # Debug: Verify the registered task definition
              echo "Verifying registered task definition..."
              aws ecs describe-task-definition --task-definition $NEW_TASK_DEF_ARN --query 'taskDefinition.containerDefinitions[0].name' --output text
            fi
          fi
          
          echo "Updating existing service..."
          # Update the service with the new task definition
          aws ecs update-service \
            --cluster finefinds-dev-cluster \
            --service FineFinds-dev-EcsService5196398A-gBUy7Nla9Poj \
            --task-definition $NEW_TASK_DEF_ARN \
            --force-new-deployment

  deploy-qa:
    needs: build-and-push
    if: ${{ !contains(github.event.head_commit.message, '[skip deploy]') && (github.ref == 'refs/heads/qa' || github.event.pull_request.base.ref == 'qa' || (github.event_name == 'workflow_dispatch' && inputs.environment == 'qa')) }}
    runs-on: ubuntu-latest
    environment: qa
    permissions:
      id-token: write
      contents: read
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download version file
        uses: actions/download-artifact@v4
        with:
          name: version
          
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-services-${{ github.ref_name == 'main' && 'prod' || github.ref_name }}
          aws-region: ${{ env.AWS_REGION }}
          role-duration-seconds: 3600
          
      - name: Deploy to ECS
        run: |
          VERSION=$(cat version.txt)
          aws ecs update-service \
            --cluster finefinds-qa \
            --service finefinds-backend \
            --force-new-deployment \
            --task-definition finefinds-backend:$VERSION

  deploy-staging:
    needs: build-and-push
    if: ${{ !contains(github.event.head_commit.message, '[skip deploy]') && (github.ref == 'refs/heads/staging' || github.event.pull_request.base.ref == 'staging' || (github.event_name == 'workflow_dispatch' && inputs.environment == 'staging')) }}
    runs-on: ubuntu-latest
    environment: staging
    permissions:
      id-token: write
      contents: read
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download version file
        uses: actions/download-artifact@v4
        with:
          name: version
          
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-services-${{ github.ref_name == 'main' && 'prod' || github.ref_name }}
          aws-region: ${{ env.AWS_REGION }}
          role-duration-seconds: 3600
          
      - name: Deploy to ECS
        run: |
          VERSION=$(cat version.txt)
          aws ecs update-service \
            --cluster finefinds-staging \
            --service finefinds-backend \
            --force-new-deployment \
            --task-definition finefinds-backend:$VERSION

  deploy-prod:
    needs: build-and-push
    if: ${{ !contains(github.event.head_commit.message, '[skip deploy]') && (github.ref == 'refs/heads/main' || github.event.pull_request.base.ref == 'main' || (github.event_name == 'workflow_dispatch' && inputs.environment == 'prod')) }}
    runs-on: ubuntu-latest
    environment: prod
    permissions:
      id-token: write
      contents: read
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download version file
        uses: actions/download-artifact@v4
        with:
          name: version
          
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-services-${{ github.ref_name == 'main' && 'prod' || github.ref_name }}
          aws-region: ${{ env.AWS_REGION }}
          role-duration-seconds: 3600
          
      - name: Deploy to ECS
        run: |
          VERSION=$(cat version.txt)
          aws ecs update-service \
            --cluster finefinds-prod \
            --service finefinds-backend \
            --force-new-deployment \
            --task-definition finefinds-backend:$VERSION

  notify:
    needs: [deploy-sandbox, deploy-dev, deploy-qa, deploy-staging, deploy-prod]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Slack Notification (Success)
        if: success()
        uses: slackapi/slack-github-action@v2.1.0
        with:
          webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
          webhook-type: webhook-trigger
          payload: |
            {
              "channel": "${{ secrets.SLACK_CHANNEL }}",
              "attachments": [
                {
                  "color": "#36a64f",
                  "pretext": ":white_check_mark: *Backend Services Deployment Succeeded*",
                  "fields": [
                    { "title": "Environment", "value": "${{ env.SERVICES_ENV }}", "short": true },
                    { "title": "Branch", "value": "${{ github.ref_name }}", "short": true },
                    { "title": "Actor", "value": "${{ github.actor }}", "short": true },
                    { "title": "Commit", "value": "${{ github.sha }}", "short": false }
                  ],
                  "actions": [
                    {
                      "type": "button",
                      "text": "View Workflow",
                      "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                    }
                  ]
                }
              ]
            }

      - name: Slack Notification (Failure)
        if: failure()
        uses: slackapi/slack-github-action@v2.1.0
        with:
          webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
          webhook-type: webhook-trigger
          payload: |
            {
              "channel": "${{ secrets.SLACK_CHANNEL }}",
              "attachments": [
                {
                  "color": "#ff0000",
                  "pretext": ":x: *Backend Services Deployment Failed*",
                  "fields": [
                    { "title": "Environment", "value": "${{ env.SERVICES_ENV }}", "short": true },
                    { "title": "Branch", "value": "${{ github.ref_name }}", "short": true },
                    { "title": "Actor", "value": "${{ github.actor }}", "short": true },
                    { "title": "Commit", "value": "${{ github.sha }}", "short": false }
                  ],
                  "actions": [
                    {
                      "type": "button",
                      "text": "View Workflow",
                      "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                    }
                  ]
                }
              ]
            }