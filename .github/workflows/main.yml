name: Service Workflows

on:
  workflow_dispatch:
    inputs:
      service:
        description: 'Service to deploy'
        required: true
        type: choice
        options:
          - admin
          - client
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - dev
          - staging
          - prod
      skip_deploy:
        description: 'Skip deployment and only run tests'
        required: false
        type: boolean
        default: false
  push:
    branches:
      - main
      - staging
      - qa
      - dev
  pull_request:
    types: [closed]
    branches:
      - main
      - staging
      - qa
      - dev

permissions:
  id-token: write
  contents: read

env:
  # AWS Configuration
  aws_region: us-east-1
  github_actions_role: github-actions-services-${{ github.ref_name == 'main' && 'prod' || github.ref_name }}
  
  # Environment Configuration
  services_env: ${{ github.ref_name == 'main' && 'prod' || github.ref_name }}
  
  # ECR Configuration
  ecr_repository_backend: finefinds-services-${{ github.ref_name == 'main' && 'prod' || github.ref_name }}
  ecr_repository_envoy: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/finefinds-base/aws-envoy
  ecr_envoy_image_tag: envoy-v1.29.12.1-prod
  
  # ECS Configuration
  cluster_name: finefinds-${{ github.ref_name == 'main' && 'prod' || github.ref_name }}-cluster
  service_name: finefinds-${{ github.ref_name == 'main' && 'prod' || github.ref_name }}-service
  task_def_family: finefinds-${{ github.ref_name == 'main' && 'prod' || github.ref_name }}-task-def
  
  # App Mesh Configuration
  mesh_name: finefinds-mesh
  virtual_node_name: finefinds-${{ github.ref_name == 'main' && 'prod' || github.ref_name }}-vn
  virtual_service_name: finefinds-${{ github.ref_name == 'main' && 'prod' || github.ref_name }}-vs
  
  # Secrets Configuration
  db_connection_secret: finefinds-${{ github.ref_name == 'main' && 'prod' || github.ref_name }}-rds-connection
  redis_connection_secret: finefinds-${{ github.ref_name == 'main' && 'prod' || github.ref_name }}-redis-connection
  jwt_secret: finefinds-${{ github.ref_name == 'main' && 'prod' || github.ref_name }}-jwt-secret
  cognito_config_secret: finefinds-${{ github.ref_name == 'main' && 'prod' || github.ref_name }}-cognito-config
  
  # Log Groups Configuration
  log_group_envoy: /finefinds/${{ github.ref_name == 'main' && 'prod' || github.ref_name }}/envoy
  log_group_app: /finefinds/${{ github.ref_name == 'main' && 'prod' || github.ref_name }}/app

jobs:
  input_check:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ env.github_actions_role }}
          aws-region: ${{ env.aws_region }}
          role-duration-seconds: 3600

      - name: Check for inputs to validate
        id: input_check
        run: |
          echo "::group::Input Validation"
          echo "Input Environment: ${{ inputs.environment }}"
          echo "Current Environment: ${{ env.services_env }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Role ARN: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ env.github_actions_role }}"
          echo "Repository: ${{ github.repository }}"
          echo "Ref: ${{ github.ref }}"
          echo "Event Name: ${{ github.event_name }}"
          echo "::endgroup::"
          
          # Verify AWS role permissions
          echo "::group::AWS Role Permission Check"
          if ! aws iam get-role --role-name ${{ env.github_actions_role }} > /dev/null 2>&1; then
            echo "::error::AWS role not found or insufficient permissions"
            exit 1
          fi
          echo "✓ AWS role permissions verified"
          echo "::endgroup::"

          # Verify environment variables
          echo "::group::Environment Variables Check"
          required_vars=(
            "aws_region"
            "github_actions_role"
            "services_env"
            "ecr_repository_backend"
            "ecr_repository_envoy"
            "ecr_envoy_image_tag"
            "cluster_name"
            "service_name"
            "task_def_family"
            "mesh_name"
            "virtual_node_name"
            "virtual_service_name"
            "db_connection_secret"
            "redis_connection_secret"
            "cognito_config_secret"
            "jwt_secret"
            "log_group_envoy"
            "log_group_app"
          )

          for var in "${required_vars[@]}"; do
            if [ -z "${!var}" ]; then
              echo "::error::Required environment variable $var is not set"
              exit 1
            fi
            echo "✓ $var is set"
          done
          echo "::endgroup::"

  test:
    needs: input_check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: |
          echo "::group::Installing dependencies"
          npm ci
          echo "::endgroup::"
        
      - name: Run tests
        run: |
          echo "::group::Running tests"
          if ! npm test; then
            echo "::error::Tests failed"
            exit 1
          fi
          echo "::endgroup::"
        
      - name: Build application
        run: |
          echo "::group::Building application"
          if ! npm run build; then
            echo "::error::Build failed"
            exit 1
          fi
          
          echo "Verifying build output..."
          if [ ! -d "dist" ]; then
            echo "::error::Build output directory 'dist' not found"
            exit 1
          fi
          
          echo "Contents of dist directory:"
          ls -la dist/
          
          echo "Contents of dist directory (recursive):"
          find dist/ -type f
          echo "::endgroup::"

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    if: ${{ !contains(github.event.head_commit.message, '[skip deploy]') }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ env.github_actions_role }}
          aws-region: ${{ env.aws_region }}
          role-duration-seconds: 3600
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registries: ${{ secrets.AWS_ACCOUNT_ID }}
        
      - name: Create ECR repository if not exists
        run: |
          echo "::group::Creating ECR repository"
          if ! aws ecr describe-repositories --repository-names ${{ env.ecr_repository_backend }} > /dev/null 2>&1; then
            echo "Creating repository: ${{ env.ecr_repository_backend }}"
            aws ecr create-repository \
              --repository-name ${{ env.ecr_repository_backend }} \
              --image-scanning-configuration scanOnPush=true
            echo "Repository created successfully"
          else
            echo "Repository already exists"
          fi
          echo "::endgroup::"
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Generate version
        id: version
        run: |
          echo "::group::Generating version"
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            # Generate a version number that's compatible with ECS task definition revisions
            # Format: YYYYMMDD-{run_number}
            VERSION=$(date +'%Y%m%d')-${{ github.run_number }}
          fi
          echo "Generated version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "::endgroup::"
          
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64
          build-args: |
            BUILDPLATFORM=linux/amd64
            TARGETPLATFORM=linux/amd64
            NODE_ENV=production
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ecr_repository_backend }}:${{ steps.version.outputs.version }}
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ecr_repository_backend }}:${{ github.ref_name }}
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ecr_repository_backend }}:latest
          cache-from: |
            type=gha,scope=${{ github.workflow }}-${{ github.ref }}
            type=registry,ref=${{ steps.login-ecr.outputs.registry }}/${{ env.ecr_repository_backend }}:buildcache
          cache-to: type=registry,ref=${{ steps.login-ecr.outputs.registry }}/${{ env.ecr_repository_backend }}:buildcache,mode=max
          provenance: false
          sbom: false
          outputs: type=docker
          no-cache-filters: |
            node_modules
            dist
            .git
            .github
            **/*.md
            **/*.log
            **/*.test.*
            **/*.spec.*
            coverage
            .env*
          
      - name: Save version for deployment
        run: |
          echo "::group::Saving version"
          echo "${{ steps.version.outputs.version }}" > version.txt
          echo "Version saved: ${{ steps.version.outputs.version }}"
          echo "::endgroup::"
        
      - name: Upload version file
        uses: actions/upload-artifact@v4
        with:
          name: version
          path: version.txt

  deploy-sandbox:
    needs: build-and-push
    if: ${{ !contains(github.event.head_commit.message, '[skip deploy]') && (github.ref == 'refs/heads/sandbox' || github.event.pull_request.base.ref == 'sandbox' || (github.event_name == 'workflow_dispatch' && inputs.environment == 'sandbox')) }}
    runs-on: ubuntu-latest
    environment: sandbox
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download version file
        uses: actions/download-artifact@v4
        with:
          name: version

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ env.github_actions_role }}
          aws-region: ${{ env.aws_region }}
          role-duration-seconds: 3600

      - name: Get VPC and Subnet Information
        id: vpc_info
        run: |
          echo "::group::Fetching VPC and Subnet Information"
          
          # Get the VPC ID for the environment
          vpc_id=$(aws ec2 describe-vpcs \
            --filters "Name=tag:Environment,Values=${{ env.services_env }}" \
            --query 'Vpcs[0].VpcId' \
            --output text)
            
          if [ -z "$vpc_id" ] || [ "$vpc_id" == "None" ]; then
            echo "::error::Could not find VPC for environment ${{ env.services_env }}"
            exit 1
          fi
          
          echo "Found VPC: $vpc_id"
          
          # Get private subnets in the VPC
          subnet_ids=$(aws ec2 describe-subnets \
            --filters "Name=vpc-id,Values=$vpc_id" "Name=tag:Type,Values=private" \
            --query 'Subnets[*].SubnetId' \
            --output text)
            
          if [ -z "$subnet_ids" ]; then
            echo "::error::Could not find private subnets in VPC $vpc_id"
            exit 1
          fi
          
          # Convert space-separated list to comma-separated
          subnet_ids=$(echo $subnet_ids | tr ' ' ',')
          echo "Found subnets: $subnet_ids"
          
          # Get security group for the ECS service
          security_group_id=$(aws ec2 describe-security-groups \
            --filters "Name=vpc-id,Values=$vpc_id" "Name=tag:Name,Values=finefinds-${{ env.services_env }}-ecs-sg" \
            --query 'SecurityGroups[0].GroupId' \
            --output text)
            
          if [ -z "$security_group_id" ] || [ "$security_group_id" == "None" ]; then
            echo "::error::Could not find security group for environment ${{ env.services_env }}"
            exit 1
          fi
          
          echo "Found security group: $security_group_id"
          
          # Output the values for use in subsequent steps
          echo "subnet_ids=$subnet_ids" >> $GITHUB_OUTPUT
          echo "security_group_id=$security_group_id" >> $GITHUB_OUTPUT
          
          echo "✓ Successfully retrieved VPC and subnet information"
          echo "::endgroup::"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ env.github_actions_role }}
          aws-region: ${{ env.aws_region }}
          role-duration-seconds: 3600
          
      - name: Verify App Mesh Resources and Permissions
        run: |
          echo "::group::Verifying App Mesh Resources"
          
          # Function to check if resource exists
          check_resource_exists() {
            local resource_type=$1
            local resource_name=$2
            local command=$3
            
            echo "Checking $resource_type: $resource_name"
            if ! $command > /dev/null 2>&1; then
              echo "::error::$resource_type $resource_name does not exist"
              return 1
            fi
            echo "✓ $resource_type $resource_name exists"
            return 0
          }
          
          # Check if mesh exists
          check_resource_exists "mesh" "${{ env.mesh_name }}" "aws appmesh describe-mesh --mesh-name ${{ env.mesh_name }}"
          
          # Check if virtual node exists
          check_resource_exists "virtual node" "${{ env.virtual_node_name }}" "aws appmesh describe-virtual-node --mesh-name ${{ env.mesh_name }} --virtual-node-name ${{ env.virtual_node_name }}"
          
          # Check if virtual service exists
          check_resource_exists "virtual service" "${{ env.virtual_service_name }}" "aws appmesh describe-virtual-service --mesh-name ${{ env.mesh_name }} --virtual-service-name ${{ env.virtual_service_name }}"
          
          # Verify IAM permissions
          echo "Verifying IAM permissions..."
          if ! aws iam simulate-principal-policy \
            --policy-source-arn arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ env.github_actions_role }} \
            --action-names \
            appmesh:StreamAggregatedResources \
            appmesh:DescribeVirtualNode \
            appmesh:DescribeVirtualService \
            appmesh:DescribeRoute \
            appmesh:DescribeVirtualRouter > /dev/null 2>&1; then
            echo "::error::Task role missing required App Mesh permissions"
            exit 1
          fi
          echo "✓ Task role has required App Mesh permissions"
          echo "::endgroup::"

      - name: Validate Envoy Image
        run: |
          echo "::group::Validating Envoy Image"
          echo "Authenticating to ECR Public..."
          aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws
          
          echo "Pulling Envoy image..."
          if ! docker pull ${{ env.ecr_repository_envoy }}:${{ env.ecr_envoy_image_tag }}; then
            echo "::error::Failed to pull Envoy image. Please check if the image exists and is accessible."
            exit 1
          fi
          echo "✓ Successfully validated Envoy image"
          echo "::endgroup::"
          
      - name: Deploy to ECS
        run: |
          echo "::group::Deploying to ECS"
          VERSION=$(cat version.txt)
          
          echo "Updating ECS service..."
          if ! aws ecs update-service \
            --cluster ${{ env.cluster_name }} \
            --service ${{ env.service_name }} \
            --force-new-deployment \
            --task-definition ${{ env.task_def_family }}:$VERSION; then
            echo "::error::Failed to update ECS service"
            exit 1
          fi
          
          echo "Waiting for service to stabilize..."
          if ! aws ecs wait services-stable \
            --cluster ${{ env.cluster_name }} \
            --services ${{ env.service_name }}; then
            echo "::error::Service failed to stabilize"
            exit 1
          fi
          
          echo "✓ Deployment completed successfully"
          echo "::endgroup::"

  deploy-dev:
    needs: build-and-push
    if: ${{ !contains(github.event.head_commit.message, '[skip deploy]') && (github.ref == 'refs/heads/dev' || github.event.pull_request.base.ref == 'dev' || (github.event_name == 'workflow_dispatch' && inputs.environment == 'dev' && !inputs.skip_deploy)) }}
    runs-on: ubuntu-latest
    environment: dev
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download version file
        uses: actions/download-artifact@v4
        with:
          name: version
          
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ env.github_actions_role }}
          aws-region: ${{ env.aws_region }}
          role-duration-seconds: 3600

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ env.github_actions_role }}
          aws-region: ${{ env.aws_region }}
          role-duration-seconds: 3600
          
      - name: Get RDS Endpoint and Credentials
        id: rds_creds
        run: |
          echo "::group::Fetching RDS Connection Details"
          
          # Get database credentials from Secrets Manager
          db_creds=$(aws secretsmanager get-secret-value \
            --secret-id "finefinds-${{ env.services_env }}-rds-connection" \
            --query "SecretString" \
            --output text)
          if [ $? -ne 0 ]; then
            echo "::error::Failed to get RDS credentials from Secrets Manager"
            exit 1
          fi
          
          # Parse credentials from JSON
          rds_endpoint=$(echo $db_creds | jq -r '.host')
          db_user=$(echo $db_creds | jq -r '.username')
          db_password=$(echo $db_creds | jq -r '.password')
          db_name=$(echo $db_creds | jq -r '.dbName')
          db_port=$(echo $db_creds | jq -r '.port')
          
          # Validate required fields
          if [ -z "$rds_endpoint" ] || [ -z "$db_user" ] || [ -z "$db_password" ] || [ -z "$db_name" ] || [ -z "$db_port" ]; then
            echo "::error::Missing required database credentials"
            exit 1
          fi
          
          # Construct database URL
          database_url="postgresql://${db_user}:${db_password}@${rds_endpoint}:${db_port}/${db_name}"
          
          # Output database URL for task definition
          echo "database_url=$database_url" >> $GITHUB_OUTPUT
          
          echo "✓ Successfully retrieved RDS connection details"
          echo "::endgroup::"

      - name: Get Secret ARNs
        id: secrets
        run: |
          echo "::group::Fetching Secret ARNs"
          
          get_secret_arn() {
            local secret_name=$1
            local max_attempts=3
            local attempt=1
            local secret_arn=""
            
            while [ $attempt -le $max_attempts ]; do
              echo "Attempt $attempt of $max_attempts to get ARN for $secret_name"
              secret_arn=$(aws secretsmanager get-secret-value \
                --secret-id "$secret_name" \
                --query 'ARN' \
                --output text)
                
              if [ $? -eq 0 ] && [ ! -z "$secret_arn" ]; then
                echo "Successfully got ARN for $secret_name"
                echo "$secret_arn"
                return 0
              fi
              
              echo "Failed to get ARN for $secret_name. Retrying..."
              sleep 5
              attempt=$((attempt + 1))
            done
            
            echo "::error::Failed to get ARN for $secret_name after $max_attempts attempts"
            return 1
          }
          
          verify_secret_access() {
            local secret_name=$1
            local max_attempts=3
            local attempt=1
            
            while [ $attempt -le $max_attempts ]; do
              echo "Attempt $attempt of $max_attempts to verify access to secret: $secret_name"
              if aws secretsmanager describe-secret --secret-id "$secret_name" > /dev/null; then
                echo "Successfully verified access to secret: $secret_name"
                return 0
              fi
              
              echo "Failed to verify access to secret: $secret_name. Retrying..."
              sleep 5
              attempt=$((attempt + 1))
            done
            
            echo "::error::Failed to verify access to secret: $secret_name after $max_attempts attempts"
            return 1
          }
          
          # Get and verify all secret ARNs
          for secret in \
            "${{ env.db_connection_secret }}" \
            "${{ env.redis_connection_secret }}" \
            "${{ env.cognito_config_secret }}" \
            "${{ env.jwt_secret }}"; do
            
            secret_arn=$(get_secret_arn "$secret")
            if [ $? -ne 0 ]; then
              exit 1
            fi
            
            # Extract the base name of the secret for the output variable
            secret_base_name=$(echo "$secret" | sed 's/.*-//')
            echo "${secret_base_name}_arn<<EOF" >> $GITHUB_OUTPUT
            echo "$secret_arn" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            
            if ! verify_secret_access "$secret"; then
              exit 1
            fi
          done
          
          echo "✓ All secrets verified successfully"
          echo "::endgroup::"

      - name: Create CloudWatch Log Groups
        id: create_log_groups
        run: |
          echo "::group::Creating CloudWatch Log Groups"
          
          log() {
            local level=$1
            shift
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] [$level] $*"
          }
          
          create_log_group() {
            local log_group=$1
            local retention_days=30
            
            log "INFO" "Checking if log group exists: $log_group"
            if ! aws logs describe-log-groups \
              --log-group-name-prefix "$log_group" \
              --query 'logGroups[0].logGroupName' \
              --output text | grep -q "$log_group"; then
              
              log "INFO" "Creating log group: $log_group"
              aws logs create-log-group --log-group-name "$log_group"
              aws logs put-retention-policy \
                --log-group-name "$log_group" \
                --retention-in-days "$retention_days"
              log "INFO" "Created log group: $log_group with retention period of $retention_days days"
            else
              log "INFO" "Log group already exists: $log_group"
            fi
          }
          
          create_all_log_groups() {
            create_log_group "${{ env.log_group_envoy }}"
            create_log_group "${{ env.log_group_app }}"
            log "INFO" "All required log groups have been created"
          }
          
          create_all_log_groups
          echo "::endgroup::"

      - name: Create Task Definition
        id: task_def
        run: |
          echo "::group::Creating Task Definition"
          VERSION=$(cat version.txt)
          
          # Function to get current task definition
          get_current_task_def() {
            local cluster=$1
            local service=$2
            aws ecs describe-services \
              --cluster $cluster \
              --services $service \
              --query 'services[0].taskDefinition' \
              --output text
          }
          
          # Function to rollback to previous task definition
          rollback_task_def() {
            local cluster=$1
            local service=$2
            local previous_task_def=$3
            echo "Rolling back to previous task definition: $previous_task_def"
            aws ecs update-service \
              --cluster $cluster \
              --service $service \
              --task-definition $previous_task_def
            aws ecs wait services-stable \
              --cluster $cluster \
              --services $service
          }
          
          # Store current task definition for rollback
          CURRENT_TASK_DEF=$(get_current_task_def "${{ env.cluster_name }}" "${{ env.service_name }}")
          echo "current_task_def=$CURRENT_TASK_DEF" >> $GITHUB_OUTPUT
          
          # Set required environment variables for the script
          export AWS_REGION="${{ env.aws_region }}"
          export AWS_ACCOUNT_ID="${{ secrets.AWS_ACCOUNT_ID }}"
          export SERVICES_ENV="${{ env.services_env }}"
          export ECR_REPOSITORY_ENVOY="${{ env.ecr_repository_envoy }}"
          export ECR_ENVOY_IMAGE_TAG="${{ env.ecr_envoy_image_tag }}"
          export ECR_REPOSITORY_BACKEND="${{ env.ecr_repository_backend }}"
          export MESH_NAME="${{ env.mesh_name }}"
          export VIRTUAL_NODE_NAME="${{ env.virtual_node_name }}"
          export LOG_GROUP_ENVOY="${{ env.log_group_envoy }}"
          export LOG_GROUP_APP="${{ env.log_group_app }}"
          export SUBNET_IDS="${{ secrets.SUBNET_IDS }}"
          export SECURITY_GROUP_IDS="${{ secrets.SECURITY_GROUP_IDS }}"
          export REDIS_CONNECTION_ARN="${{ steps.secrets.outputs.redis_connection_arn }}"
          export JWT_SECRET_ARN="${{ steps.secrets.outputs.jwt_secret_arn }}"
          export COGNITO_CLIENT_USER_POOL_ID="${{ steps.cognito_config.outputs.client_user_pool_id }}"
          export COGNITO_CLIENT_CLIENT_ID="${{ steps.cognito_config.outputs.client_client_id }}"
          export COGNITO_ADMIN_USER_POOL_ID="${{ steps.cognito_config.outputs.admin_user_pool_id }}"
          export COGNITO_ADMIN_CLIENT_ID="${{ steps.cognito_config.outputs.admin_client_id }}"
          
          # Make the script executable and run it
          chmod +x exec/create-task-definition.sh
          ./exec/create-task-definition.sh "${{ env.services_env }}" "${{ env.task_def_family }}"
          echo "::endgroup::"

      - name: Deploy to ECS
        id: deploy
        run: |
          echo "::group::Deploying to ECS"
          
          # Function to log with timestamp and level
          log() {
            local level=$1
            shift
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] [$level] $*"
          }
          
          log "INFO" "Starting deployment process..."
          log "INFO" "Environment: ${{ env.services_env }}"
          log "INFO" "Cluster: ${{ env.cluster_name }}"
          log "INFO" "Service: ${{ env.service_name }}"
          log "INFO" "Task Definition: ${{ steps.task_def.outputs.task_def_arn }}"
          
          # Function to check if service exists
          check_service_exists() {
            local cluster=$1
            local service=$2
            aws ecs describe-services \
              --cluster "$cluster" \
              --services "$service" \
              --query 'services[0].status' \
              --output text 2>/dev/null || echo "NONEXISTENT"
          }
          
          # Function to create service
          create_service() {
            local cluster=$1
            local service=$2
            local task_def=$3
            
            log "INFO" "Creating new ECS service..."
            aws ecs create-service \
              --cluster "$cluster" \
              --service-name "$service" \
              --task-definition "$task_def" \
              --desired-count 1 \
              --launch-type FARGATE \
              --service-registries "registryArn=arn:aws:servicediscovery:${{ env.aws_region }}:${{ secrets.AWS_ACCOUNT_ID }}:service/${{ env.services_env }}-service-discovery" || {
                log "ERROR" "Failed to create ECS service"
                return 1
              }
          }
          
          # Function to check container pull status
          check_container_pull_status() {
            local cluster=$1
            local service=$2
            local max_attempts=10
            local attempt=1
            
            while [ $attempt -le $max_attempts ]; do
              log "INFO" "Checking container pull status (attempt $attempt of $max_attempts)..."
              
              # Get the latest task ARN
              local task_arn=$(aws ecs list-tasks \
                --cluster "$cluster" \
                --service-name "$service" \
                --desired-status RUNNING \
                --query 'taskArns[0]' \
                --output text)
              
              if [ -z "$task_arn" ] || [ "$task_arn" == "None" ]; then
                log "WARNING" "No running tasks found. Waiting..."
                sleep 30
                attempt=$((attempt + 1))
                continue
              fi
              
              # Check task status
              local task_status=$(aws ecs describe-tasks \
                --cluster "$cluster" \
                --tasks "$task_arn" \
                --query 'tasks[0].lastStatus' \
                --output text)
              
              if [ "$task_status" == "RUNNING" ]; then
                log "INFO" "Container successfully pulled and running"
                return 0
              elif [ "$task_status" == "STOPPED" ]; then
                local stop_reason=$(aws ecs describe-tasks \
                  --cluster "$cluster" \
                  --tasks "$task_arn" \
                  --query 'tasks[0].stoppedReason' \
                  --output text)
                log "ERROR" "Container stopped: $stop_reason"
                return 1
              fi
              
              log "INFO" "Container status: $task_status. Waiting..."
              sleep 30
              attempt=$((attempt + 1))
            done
            
            log "ERROR" "Container pull timed out after $max_attempts attempts"
            return 1
          }
          
          # Check if service exists
          service_status=$(check_service_exists "${{ env.cluster_name }}" "${{ env.service_name }}")
          
          if [ "$service_status" == "NONEXISTENT" ]; then
            log "INFO" "Service does not exist. Creating new service..."
            if ! create_service "${{ env.cluster_name }}" "${{ env.service_name }}" "${{ steps.task_def.outputs.task_def_arn }}"; then
              exit 1
            fi
          else
            log "INFO" "Updating existing ECS service..."
            if ! aws ecs update-service \
              --cluster ${{ env.cluster_name }} \
              --service ${{ env.service_name }} \
              --task-definition ${{ steps.task_def.outputs.task_def_arn }}; then
              log "ERROR" "Failed to update ECS service"
              exit 1
            fi
          fi
          
          log "INFO" "Waiting for service to stabilize..."
          if ! aws ecs wait services-stable \
            --cluster ${{ env.cluster_name }} \
            --services ${{ env.service_name }}; then
            log "ERROR" "Service failed to stabilize"
            exit 1
          fi
          
          # Check container pull status
          if ! check_container_pull_status "${{ env.cluster_name }}" "${{ env.service_name }}"; then
            log "ERROR" "Container pull failed"
            exit 1
          fi
          
          log "INFO" "Deployment completed successfully"
          
          # Clean up temporary files
          log "INFO" "Cleaning up temporary files..."
          rm -f version.txt task-definition.json
          echo "::endgroup::"

  deploy-qa:
    needs: build-and-push
    if: ${{ !contains(github.event.head_commit.message, '[skip deploy]') && (github.ref == 'refs/heads/qa' || github.event.pull_request.base.ref == 'qa' || (github.event_name == 'workflow_dispatch' && inputs.environment == 'qa' && !inputs.skip_deploy)) }}
    runs-on: ubuntu-latest
    environment: qa
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download version file
        uses: actions/download-artifact@v4
        with:
          name: version
          
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ env.github_actions_role }}
          aws-region: ${{ env.aws_region }}
          role-duration-seconds: 3600

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ env.github_actions_role }}
          aws-region: ${{ env.aws_region }}
          role-duration-seconds: 3600
          
      - name: Verify App Mesh Resources and Permissions
        run: |
          echo "::group::Verifying App Mesh Resources"
          
          # Function to check if resource exists
          check_resource_exists() {
            local resource_type=$1
            local resource_name=$2
            local command=$3
            
            echo "Checking $resource_type: $resource_name"
            if ! $command > /dev/null 2>&1; then
              echo "::error::$resource_type $resource_name does not exist"
              return 1
            fi
            echo "✓ $resource_type $resource_name exists"
            return 0
          }
          
          # Check if mesh exists
          check_resource_exists "mesh" "${{ env.mesh_name }}" "aws appmesh describe-mesh --mesh-name ${{ env.mesh_name }}"
          
          # Check if virtual node exists
          check_resource_exists "virtual node" "${{ env.virtual_node_name }}" "aws appmesh describe-virtual-node --mesh-name ${{ env.mesh_name }} --virtual-node-name ${{ env.virtual_node_name }}"
          
          # Check if virtual service exists
          check_resource_exists "virtual service" "${{ env.virtual_service_name }}" "aws appmesh describe-virtual-service --mesh-name ${{ env.mesh_name }} --virtual-service-name ${{ env.virtual_service_name }}"
          
          # Verify IAM permissions
          echo "Verifying IAM permissions..."
          if ! aws iam simulate-principal-policy \
            --policy-source-arn arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ env.github_actions_role }} \
            --action-names \
            appmesh:StreamAggregatedResources \
            appmesh:DescribeVirtualNode \
            appmesh:DescribeVirtualService \
            appmesh:DescribeRoute \
            appmesh:DescribeVirtualRouter > /dev/null 2>&1; then
            echo "::error::Task role missing required App Mesh permissions"
            exit 1
          fi
          echo "✓ Task role has required App Mesh permissions"
          echo "::endgroup::"
          
      - name: Validate Envoy Image
        run: |
          echo "::group::Validating Envoy Image"
          echo "Authenticating to ECR Public..."
          aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws
          
          echo "Pulling Envoy image..."
          if ! docker pull ${{ env.ecr_repository_envoy }}:${{ env.ecr_envoy_image_tag }}; then
            echo "::error::Failed to pull Envoy image. Please check if the image exists and is accessible."
            exit 1
          fi
          echo "✓ Successfully validated Envoy image"
          echo "::endgroup::"
          
      - name: Get Secret ARNs
        id: secrets
        run: |
          echo "::group::Fetching Secret ARNs"
          
          get_secret_arn() {
            local secret_name=$1
            local max_attempts=3
            local attempt=1
            local secret_arn=""
            
            while [ $attempt -le $max_attempts ]; do
              echo "Attempt $attempt of $max_attempts to get ARN for $secret_name"
              secret_arn=$(aws secretsmanager get-secret-value \
                --secret-id "$secret_name" \
                --query 'ARN' \
                --output text)
              
              if [ $? -eq 0 ] && [ ! -z "$secret_arn" ]; then
                echo "Successfully got ARN for $secret_name"
                echo "$secret_arn"
                return 0
              fi
              
              echo "Failed to get ARN for $secret_name. Retrying..."
              sleep 5
              attempt=$((attempt + 1))
            done
            
            echo "::error::Failed to get ARN for $secret_name after $max_attempts attempts"
                return 1
          }
          
          verify_secret_access() {
            local secret_name=$1
            local max_attempts=3
            local attempt=1
            
            while [ $attempt -le $max_attempts ]; do
              echo "Attempt $attempt of $max_attempts to verify access to secret: $secret_name"
              if aws secretsmanager describe-secret --secret-id "$secret_name" > /dev/null; then
                echo "Successfully verified access to secret: $secret_name"
                return 0
              fi
              
              echo "Failed to verify access to secret: $secret_name. Retrying..."
              sleep 5
              attempt=$((attempt + 1))
            done
            
            echo "::error::Failed to verify access to secret: $secret_name after $max_attempts attempts"
            return 1
          }
          
          # Get and verify all secret ARNs
          for secret in \
            "${{ env.db_connection_secret }}" \
            "${{ env.redis_connection_secret }}" \
            "${{ env.cognito_config_secret }}" \
            "${{ env.jwt_secret }}"; do
            
            secret_arn=$(get_secret_arn "$secret")
            if [ $? -ne 0 ]; then
              exit 1
            fi
            
            # Extract the base name of the secret for the output variable
            secret_base_name=$(echo "$secret" | sed 's/.*-//')
            echo "${secret_base_name}_arn<<EOF" >> $GITHUB_OUTPUT
            echo "$secret_arn" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            
            if ! verify_secret_access "$secret"; then
              exit 1
            fi
          done
          
          echo "✓ All secrets verified successfully"
          echo "::endgroup::"

      - name: Create CloudWatch Log Groups
        id: create_log_groups
        run: |
          echo "::group::Creating CloudWatch Log Groups"
          
          log() {
            local level=$1
            shift
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] [$level] $*"
          }
          
          create_log_group() {
            local log_group=$1
            local retention_days=30
            
            log "INFO" "Checking if log group exists: $log_group"
            if ! aws logs describe-log-groups \
              --log-group-name-prefix "$log_group" \
              --query 'logGroups[0].logGroupName' \
              --output text | grep -q "$log_group"; then
              
              log "INFO" "Creating log group: $log_group"
              aws logs create-log-group --log-group-name "$log_group"
              aws logs put-retention-policy \
                --log-group-name "$log_group" \
                --retention-in-days "$retention_days"
              log "INFO" "Created log group: $log_group with retention period of $retention_days days"
            else
              log "INFO" "Log group already exists: $log_group"
            fi
          }
          
          create_all_log_groups() {
            create_log_group "${{ env.log_group_envoy }}"
            create_log_group "${{ env.log_group_app }}"
            log "INFO" "All required log groups have been created"
          }
          
          create_all_log_groups
          echo "::endgroup::"

      - name: Create Task Definition
        id: task_def
        run: |
          echo "::group::Creating Task Definition"
          VERSION=$(cat version.txt)
          
          # Function to get current task definition
          get_current_task_def() {
            local cluster=$1
            local service=$2
            aws ecs describe-services \
              --cluster $cluster \
              --services $service \
              --query 'services[0].taskDefinition' \
              --output text
          }
          
          # Function to rollback to previous task definition
          rollback_task_def() {
            local cluster=$1
            local service=$2
            local previous_task_def=$3
            echo "Rolling back to previous task definition: $previous_task_def"
            aws ecs update-service \
              --cluster $cluster \
              --service $service \
              --task-definition $previous_task_def
            aws ecs wait services-stable \
              --cluster $cluster \
              --services $service
          }
          
          # Function to clean up old task definitions
          cleanup_old_task_defs() {
            local family=$1
            local keep_count=5
            echo "Cleaning up old task definitions for family: $family"
            
            # Get all task definitions for the family
            local task_defs=($(aws ecs list-task-definitions \
              --family-prefix "$family" \
              --sort DESC \
              --query 'taskDefinitionArns[]' \
              --output text))
            
            # Keep the most recent ones
            local keep_defs=("${task_defs[@]:0:$keep_count}")
            echo "Keeping task definitions:"
            for def in "${keep_defs[@]}"; do
              echo "  $def"
            done
            
            # Deregister the rest
            local deregister_defs=("${task_defs[@]:$keep_count}")
            if [ ${#deregister_defs[@]} -gt 0 ]; then
              echo "Deregistering old task definitions:"
              for def in "${deregister_defs[@]}"; do
                echo "  Deregistering: $def"
                aws ecs deregister-task-definition --task-definition "$def" || {
                  echo "::warning::Failed to deregister task definition: $def"
                  continue
                }
              done
            else
              echo "No old task definitions to deregister"
            fi
          }
          
          # Store current task definition for rollback
          CURRENT_TASK_DEF=$(get_current_task_def "${{ env.cluster_name }}" "${{ env.service_name }}")
          echo "current_task_def=$CURRENT_TASK_DEF" >> $GITHUB_OUTPUT
          
          # Function to create task definition JSON
          create_task_definition() {
            local env=$1
            local task_def_family=$2
            local execution_role="finefinds-$env-ecs-execution-role"
            local task_role="finefinds-$env-ecs-task-role"
            
            echo "Verifying IAM roles..."
            if ! aws iam get-role --role-name "$execution_role" > /dev/null 2>&1; then
              echo "::error::Execution role $execution_role does not exist"
              return 1
            fi
            if ! aws iam get-role --role-name "$task_role" > /dev/null 2>&1; then
              echo "::error::Task role $task_role does not exist"
              return 1
            fi
            
            local execution_role_arn=$(aws iam get-role --role-name "$execution_role" --query 'Role.Arn' --output text)
            local task_role_arn=$(aws iam get-role --role-name "$task_role" --query 'Role.Arn' --output text)
            
            if [ -z "$execution_role_arn" ] || [ -z "$task_role_arn" ]; then
              echo "::error::Failed to get role ARNs"
              return 1
            fi
            
            echo "Using execution role: $execution_role_arn"
            echo "Using task role: $task_role_arn"
            
            # Get database connection secret ARN
            local db_connection_arn=$(aws secretsmanager get-secret-value \
              --secret-id "finefinds-${{ env.services_env }}-rds-connection" \
              --query 'ARN' \
              --output text)
            
            if [ -z "$db_connection_arn" ]; then
              echo "::error::Failed to get database connection secret ARN"
              return 1
            fi
            
            echo "Using database connection secret ARN: $db_connection_arn"
            echo "db_connection_arn=$db_connection_arn" >> $GITHUB_OUTPUT
            
            # Create task definition JSON
            cat > task-definition.json << EOF
            {
              "family": "$task_def_family",
              "networkMode": "awsvpc",
              "requiresCompatibilities": ["FARGATE"],
              "cpu": "256",
              "memory": "512",
              "executionRoleArn": "$execution_role_arn",
              "taskRoleArn": "$task_role_arn",
              "runtimePlatform": {
                "operatingSystemFamily": "LINUX",
                "cpuArchitecture": "X86_64"
              },
              "proxyConfiguration": {
                "type": "APPMESH",
                "containerName": "envoy",
                "properties": [
                  {"name": "IgnoredUID", "value": "1337"},
                  {"name": "ProxyIngressPort", "value": "15000"},
                  {"name": "ProxyEgressPort", "value": "15001"},
                  {"name": "AppPorts", "value": "3000"},
                  {"name": "EgressIgnoredIPs", "value": "169.254.170.2,169.254.169.254"}
                ]
              },
              "containerDefinitions": [
                {
                  "name": "envoy",
                  "image": "${{ env.ecr_repository_envoy }}:${{ env.ecr_envoy_image_tag }}",
                  "essential": true,
                  "user": "1337",
                  "environment": [
                    {"name": "APPMESH_VIRTUAL_NODE_NAME", "value": "mesh/${{ env.mesh_name }}/virtualNode/${{ env.virtual_node_name }}"},
                    {"name": "ENABLE_ENVOY_STATS_TAGS", "value": "1"},
                    {"name": "ENABLE_ENVOY_XRAY_TRACING", "value": "1"},
                    {"name": "APPMESH_PREVIEW", "value": "0"}
                  ],
                  "healthCheck": {
                    "command": ["CMD-SHELL", "curl -s http://localhost:9901/server_info | grep state | grep -q LIVE"],
                    "interval": 5,
                    "timeout": 2,
                    "retries": 3,
                    "startPeriod": 10
                  },
                  "logConfiguration": {
                    "logDriver": "awslogs",
                    "options": {
                      "awslogs-group": "${{ env.log_group_envoy }}",
                      "awslogs-region": "${{ env.aws_region }}",
                      "awslogs-stream-prefix": "envoy"
                    }
                  }
                },
                {
                  "name": "AppContainer",
                  "image": "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.aws_region }}.amazonaws.com/${{ env.ecr_repository_backend }}:latest",
                  "essential": true,
                  "workingDirectory": "/app",
                  "entryPoint": ["node"],
                  "command": ["dist/src/main.js"],
                  "portMappings": [{"containerPort": 3000, "protocol": "tcp"}],
                  "environment": [
                    {"name": "PORT", "value": "3000"},
                    {"name": "NODE_ENV", "value": "${{ env.services_env }}"},
                    {"name": "AWS_REGION", "value": "${{ env.aws_region }}"},
                    {"name": "APPMESH_VIRTUAL_NODE_NAME", "value": "mesh/${{ env.mesh_name }}/virtualNode/${{ env.virtual_node_name }}"}
                  ],
                  "secrets": [
                    {"name": "DATABASE_URL", "valueFrom": "'$db_connection_arn'"},
                    {"name": "REDIS_URL", "valueFrom": "${{ steps.secrets.outputs.redis_connection_arn }}"},
                    {"name": "JWT_SECRET", "valueFrom": "${{ steps.secrets.outputs.jwt_secret_arn }}"}
                  ],
                  "environment": [
                    {"name": "COGNITO_CLIENT_USER_POOL_ID", "value": "${{ steps.cognito_config.outputs.client_user_pool_id }}"},
                    {"name": "COGNITO_CLIENT_CLIENT_ID", "value": "${{ steps.cognito_config.outputs.client_client_id }}"},
                    {"name": "COGNITO_ADMIN_USER_POOL_ID", "value": "${{ steps.cognito_config.outputs.admin_user_pool_id }}"},
                    {"name": "COGNITO_ADMIN_CLIENT_ID", "value": "${{ steps.cognito_config.outputs.admin_client_id }}"}
                  ],
                  "logConfiguration": {
                    "logDriver": "awslogs",
                    "options": {
                      "awslogs-group": "${{ env.log_group_app }}",
                      "awslogs-region": "${{ env.aws_region }}",
                      "awslogs-stream-prefix": "finefinds"
                    }
                  },
                  "healthCheck": {
                    "command": ["CMD-SHELL", "curl -f http://localhost:3000/health || exit 1"],
                    "interval": 30,
                    "timeout": 5,
                    "retries": 3,
                    "startPeriod": 60
                  }
                }
              ]
            }
            EOF
          }
          
          # Create task definition based on environment
          if ! create_task_definition "${{ env.services_env }}" "${{ env.task_def_family }}"; then
            exit 1
          fi
          
          # Validate task definition JSON
          if ! jq . task-definition.json > /dev/null 2>&1; then
            echo "::error::Invalid JSON in task definition"
            cat task-definition.json
            exit 1
          fi
          
          # Register task definition
          echo "Registering task definition..."
          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://task-definition.json \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)
            
          if [ $? -ne 0 ] || [ -z "$NEW_TASK_DEF_ARN" ]; then
            echo "::error::Failed to register task definition"
            echo "Task definition JSON:"
            cat task-definition.json
            exit 1
          fi
          
          echo "task_def_arn=$NEW_TASK_DEF_ARN" >> $GITHUB_OUTPUT
          
          # Clean up old task definitions
          cleanup_old_task_defs "${{ env.task_def_family }}"
          echo "::endgroup::"

      - name: Deploy to ECS
        id: deploy
        run: |
          echo "::group::Deploying to ECS"
          
          # Function to log with timestamp and level
          log() {
            local level=$1
            shift
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] [$level] $*"
          }
          
          log "INFO" "Starting deployment process..."
          log "INFO" "Environment: ${{ env.services_env }}"
          log "INFO" "Cluster: ${{ env.cluster_name }}"
          log "INFO" "Service: ${{ env.service_name }}"
          log "INFO" "Task Definition: ${{ steps.task_def.outputs.task_def_arn }}"
          
          # Function to check if service exists
          check_service_exists() {
            local cluster=$1
            local service=$2
            aws ecs describe-services \
              --cluster "$cluster" \
              --services "$service" \
              --query 'services[0].status' \
              --output text 2>/dev/null || echo "NONEXISTENT"
          }
          
          # Function to create service
          create_service() {
            local cluster=$1
            local service=$2
            local task_def=$3
            
            log "INFO" "Creating new ECS service..."
            aws ecs create-service \
              --cluster "$cluster" \
              --service-name "$service" \
              --task-definition "$task_def" \
              --desired-count 1 \
              --launch-type FARGATE \
              --service-registries "registryArn=arn:aws:servicediscovery:${{ env.aws_region }}:${{ secrets.AWS_ACCOUNT_ID }}:service/${{ env.services_env }}-service-discovery" || {
                log "ERROR" "Failed to create ECS service"
                return 1
              }
          }
          
          # Function to check container pull status
          check_container_pull_status() {
            local cluster=$1
            local service=$2
            local max_attempts=10
            local attempt=1
            
            while [ $attempt -le $max_attempts ]; do
              log "INFO" "Checking container pull status (attempt $attempt of $max_attempts)..."
              
              # Get the latest task ARN
              local task_arn=$(aws ecs list-tasks \
                --cluster "$cluster" \
                --service-name "$service" \
                --desired-status RUNNING \
                --query 'taskArns[0]' \
                --output text)
              
              if [ -z "$task_arn" ] || [ "$task_arn" == "None" ]; then
                log "WARNING" "No running tasks found. Waiting..."
                sleep 30
                attempt=$((attempt + 1))
                continue
              fi
              
              # Check task status
              local task_status=$(aws ecs describe-tasks \
                --cluster "$cluster" \
                --tasks "$task_arn" \
                --query 'tasks[0].lastStatus' \
                --output text)
              
              if [ "$task_status" == "RUNNING" ]; then
                log "INFO" "Container successfully pulled and running"
                return 0
              elif [ "$task_status" == "STOPPED" ]; then
                local stop_reason=$(aws ecs describe-tasks \
                  --cluster "$cluster" \
                  --tasks "$task_arn" \
                  --query 'tasks[0].stoppedReason' \
                  --output text)
                log "ERROR" "Container stopped: $stop_reason"
                return 1
              fi
              
              log "INFO" "Container status: $task_status. Waiting..."
              sleep 30
              attempt=$((attempt + 1))
            done
            
            log "ERROR" "Container pull timed out after $max_attempts attempts"
            return 1
          }
          
          # Check if service exists
          service_status=$(check_service_exists "${{ env.cluster_name }}" "${{ env.service_name }}")
          
          if [ "$service_status" == "NONEXISTENT" ]; then
            log "INFO" "Service does not exist. Creating new service..."
            if ! create_service "${{ env.cluster_name }}" "${{ env.service_name }}" "${{ steps.task_def.outputs.task_def_arn }}"; then
              exit 1
            fi
          else
            log "INFO" "Updating existing ECS service..."
            if ! aws ecs update-service \
              --cluster ${{ env.cluster_name }} \
              --service ${{ env.service_name }} \
              --task-definition ${{ steps.task_def.outputs.task_def_arn }}; then
              log "ERROR" "Failed to update ECS service"
              exit 1
            fi
          fi
          
          log "INFO" "Waiting for service to stabilize..."
          if ! aws ecs wait services-stable \
            --cluster ${{ env.cluster_name }} \
            --services ${{ env.service_name }}; then
            log "ERROR" "Service failed to stabilize"
            exit 1
          fi
          
          # Check container pull status
          if ! check_container_pull_status "${{ env.cluster_name }}" "${{ env.service_name }}"; then
            log "ERROR" "Container pull failed"
            exit 1
          fi
          
          log "INFO" "Deployment completed successfully"
          
          # Clean up temporary files
          log "INFO" "Cleaning up temporary files..."
          rm -f version.txt task-definition.json
          echo "::endgroup::"

  deploy-staging:
    needs: build-and-push
    if: ${{ !contains(github.event.head_commit.message, '[skip deploy]') && (github.ref == 'refs/heads/staging' || github.event.pull_request.base.ref == 'staging' || (github.event_name == 'workflow_dispatch' && inputs.environment == 'staging' && !inputs.skip_deploy)) }}
    runs-on: ubuntu-latest
    environment: staging
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download version file
        uses: actions/download-artifact@v4
        with:
          name: version
          
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ env.github_actions_role }}
          aws-region: ${{ env.aws_region }}
          role-duration-seconds: 3600

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ env.github_actions_role }}
          aws-region: ${{ env.aws_region }}
          role-duration-seconds: 3600
          
      - name: Verify App Mesh Resources and Permissions
        run: |
          echo "::group::Verifying App Mesh Resources"
          
          # Function to check if resource exists
          check_resource_exists() {
            local resource_type=$1
            local resource_name=$2
            local command=$3
            
            echo "Checking $resource_type: $resource_name"
            if ! $command > /dev/null 2>&1; then
              echo "::error::$resource_type $resource_name does not exist"
              return 1
            fi
            echo "✓ $resource_type $resource_name exists"
            return 0
          }
          
          # Check if mesh exists
          check_resource_exists "mesh" "${{ env.mesh_name }}" "aws appmesh describe-mesh --mesh-name ${{ env.mesh_name }}"
          
          # Check if virtual node exists
          check_resource_exists "virtual node" "${{ env.virtual_node_name }}" "aws appmesh describe-virtual-node --mesh-name ${{ env.mesh_name }} --virtual-node-name ${{ env.virtual_node_name }}"
          
          # Check if virtual service exists
          check_resource_exists "virtual service" "${{ env.virtual_service_name }}" "aws appmesh describe-virtual-service --mesh-name ${{ env.mesh_name }} --virtual-service-name ${{ env.virtual_service_name }}"
          
          # Verify IAM permissions
          echo "Verifying IAM permissions..."
          if ! aws iam simulate-principal-policy \
            --policy-source-arn arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ env.github_actions_role }} \
            --action-names \
            appmesh:StreamAggregatedResources \
            appmesh:DescribeVirtualNode \
            appmesh:DescribeVirtualService \
            appmesh:DescribeRoute \
            appmesh:DescribeVirtualRouter > /dev/null 2>&1; then
            echo "::error::Task role missing required App Mesh permissions"
            exit 1
          fi
          echo "✓ Task role has required App Mesh permissions"
          echo "::endgroup::"
          
      - name: Validate Envoy Image
        run: |
          echo "::group::Validating Envoy Image"
          echo "Authenticating to ECR Public..."
          aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws
          
          echo "Pulling Envoy image..."
          if ! docker pull ${{ env.ecr_repository_envoy }}:${{ env.ecr_envoy_image_tag }}; then
            echo "::error::Failed to pull Envoy image. Please check if the image exists and is accessible."
            exit 1
          fi
          echo "✓ Successfully validated Envoy image"
          echo "::endgroup::"
          
      - name: Get Secret ARNs
        id: secrets
        run: |
          echo "::group::Fetching Secret ARNs"
          
          get_secret_arn() {
            local secret_name=$1
            local max_attempts=3
            local attempt=1
            local secret_arn=""
            
            while [ $attempt -le $max_attempts ]; do
              echo "Attempt $attempt of $max_attempts to get ARN for $secret_name"
              secret_arn=$(aws secretsmanager get-secret-value \
                --secret-id "$secret_name" \
                --query 'ARN' \
                --output text)
                
              if [ $? -eq 0 ] && [ ! -z "$secret_arn" ]; then
                echo "Successfully got ARN for $secret_name"
                echo "$secret_arn"
                return 0
              fi
              
              echo "Failed to get ARN for $secret_name. Retrying..."
              sleep 5
              attempt=$((attempt + 1))
            done
            
            echo "::error::Failed to get ARN for $secret_name after $max_attempts attempts"
            return 1
          }
          
          verify_secret_access() {
            local secret_name=$1
            local max_attempts=3
            local attempt=1
            
            while [ $attempt -le $max_attempts ]; do
              echo "Attempt $attempt of $max_attempts to verify access to secret: $secret_name"
              if aws secretsmanager describe-secret --secret-id "$secret_name" > /dev/null; then
                echo "Successfully verified access to secret: $secret_name"
                return 0
              fi
              
              echo "Failed to verify access to secret: $secret_name. Retrying..."
              sleep 5
              attempt=$((attempt + 1))
            done
            
            echo "::error::Failed to verify access to secret: $secret_name after $max_attempts attempts"
            return 1
          }
          
          # Get and verify all secret ARNs
          for secret in \
            "${{ env.db_connection_secret }}" \
            "${{ env.redis_connection_secret }}" \
            "${{ env.cognito_config_secret }}" \
            "${{ env.jwt_secret }}"; do
            
            secret_arn=$(get_secret_arn "$secret")
            if [ $? -ne 0 ]; then
              exit 1
            fi
            
            # Extract the base name of the secret for the output variable
            secret_base_name=$(echo "$secret" | sed 's/.*-//')
            echo "${secret_base_name}_arn<<EOF" >> $GITHUB_OUTPUT
            echo "$secret_arn" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            
            if ! verify_secret_access "$secret"; then
              exit 1
            fi
          done
          
          echo "✓ All secrets verified successfully"
          echo "::endgroup::"

      - name: Create CloudWatch Log Groups
        id: create_log_groups
        run: |
          echo "::group::Creating CloudWatch Log Groups"
          
          log() {
            local level=$1
            shift
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] [$level] $*"
          }
          
          create_log_group() {
            local log_group=$1
            local retention_days=30
            
            log "INFO" "Checking if log group exists: $log_group"
            if ! aws logs describe-log-groups \
              --log-group-name-prefix "$log_group" \
              --query 'logGroups[0].logGroupName' \
              --output text | grep -q "$log_group"; then
              
              log "INFO" "Creating log group: $log_group"
              aws logs create-log-group --log-group-name "$log_group"
              aws logs put-retention-policy \
                --log-group-name "$log_group" \
                --retention-in-days "$retention_days"
              log "INFO" "Created log group: $log_group with retention period of $retention_days days"
            else
              log "INFO" "Log group already exists: $log_group"
            fi
          }
          
          create_all_log_groups() {
            create_log_group "${{ env.log_group_envoy }}"
            create_log_group "${{ env.log_group_app }}"
            log "INFO" "All required log groups have been created"
          }
          
          create_all_log_groups
          echo "::endgroup::"

      - name: Create Task Definition
        id: task_def
        run: |
          echo "::group::Creating Task Definition"
          VERSION=$(cat version.txt)
          
          # Function to get current task definition
          get_current_task_def() {
            local cluster=$1
            local service=$2
            aws ecs describe-services \
              --cluster $cluster \
              --services $service \
              --query 'services[0].taskDefinition' \
              --output text
          }
          
          # Function to rollback to previous task definition
          rollback_task_def() {
            local cluster=$1
            local service=$2
            local previous_task_def=$3
            echo "Rolling back to previous task definition: $previous_task_def"
            aws ecs update-service \
              --cluster $cluster \
              --service $service \
              --task-definition $previous_task_def
            aws ecs wait services-stable \
              --cluster $cluster \
              --services $service
          }
          
          # Function to clean up old task definitions
          cleanup_old_task_defs() {
            local family=$1
            local keep_count=5
            echo "Cleaning up old task definitions for family: $family"
            
            # Get all task definitions for the family
            local task_defs=($(aws ecs list-task-definitions \
              --family-prefix "$family" \
              --sort DESC \
              --query 'taskDefinitionArns[]' \
              --output text))
            
            # Keep the most recent ones
            local keep_defs=("${task_defs[@]:0:$keep_count}")
            echo "Keeping task definitions:"
            for def in "${keep_defs[@]}"; do
              echo "  $def"
            done
            
            # Deregister the rest
            local deregister_defs=("${task_defs[@]:$keep_count}")
            if [ ${#deregister_defs[@]} -gt 0 ]; then
              echo "Deregistering old task definitions:"
              for def in "${deregister_defs[@]}"; do
                echo "  Deregistering: $def"
                aws ecs deregister-task-definition --task-definition "$def" || {
                  echo "::warning::Failed to deregister task definition: $def"
                  continue
                }
              done
            else
              echo "No old task definitions to deregister"
            fi
          }
          
          # Store current task definition for rollback
          CURRENT_TASK_DEF=$(get_current_task_def "${{ env.cluster_name }}" "${{ env.service_name }}")
          echo "current_task_def=$CURRENT_TASK_DEF" >> $GITHUB_OUTPUT
          
          # Function to create task definition JSON
          create_task_definition() {
            local env=$1
            local task_def_family=$2
            local execution_role="finefinds-$env-ecs-execution-role"
            local task_role="finefinds-$env-ecs-task-role"
            
            echo "Verifying IAM roles..."
            if ! aws iam get-role --role-name "$execution_role" > /dev/null 2>&1; then
              echo "::error::Execution role $execution_role does not exist"
              return 1
            fi
            if ! aws iam get-role --role-name "$task_role" > /dev/null 2>&1; then
              echo "::error::Task role $task_role does not exist"
              return 1
            fi
            
            local execution_role_arn=$(aws iam get-role --role-name "$execution_role" --query 'Role.Arn' --output text)
            local task_role_arn=$(aws iam get-role --role-name "$task_role" --query 'Role.Arn' --output text)
            
            if [ -z "$execution_role_arn" ] || [ -z "$task_role_arn" ]; then
              echo "::error::Failed to get role ARNs"
              return 1
            fi
            
            echo "Using execution role: $execution_role_arn"
            echo "Using task role: $task_role_arn"
            
            # Get database connection secret ARN
            local db_connection_arn=$(aws secretsmanager get-secret-value \
              --secret-id "finefinds-${{ env.services_env }}-rds-connection" \
              --query 'ARN' \
              --output text)
            
            if [ -z "$db_connection_arn" ]; then
              echo "::error::Failed to get database connection secret ARN"
              return 1
            fi
            
            echo "Using database connection secret ARN: $db_connection_arn"
            echo "db_connection_arn=$db_connection_arn" >> $GITHUB_OUTPUT
            
            # Create task definition JSON
            cat > task-definition.json << EOF
            {
              "family": "$task_def_family",
              "networkMode": "awsvpc",
              "requiresCompatibilities": ["FARGATE"],
              "cpu": "256",
              "memory": "512",
              "executionRoleArn": "$execution_role_arn",
              "taskRoleArn": "$task_role_arn",
              "runtimePlatform": {
                "operatingSystemFamily": "LINUX",
                "cpuArchitecture": "X86_64"
              },
              "proxyConfiguration": {
                "type": "APPMESH",
                "containerName": "envoy",
                "properties": [
                  {"name": "IgnoredUID", "value": "1337"},
                  {"name": "ProxyIngressPort", "value": "15000"},
                  {"name": "ProxyEgressPort", "value": "15001"},
                  {"name": "AppPorts", "value": "3000"},
                  {"name": "EgressIgnoredIPs", "value": "169.254.170.2,169.254.169.254"}
                ]
              },
              "containerDefinitions": [
                {
                  "name": "envoy",
                  "image": "${{ env.ecr_repository_envoy }}:${{ env.ecr_envoy_image_tag }}",
                  "essential": true,
                  "user": "1337",
                  "environment": [
                    {"name": "APPMESH_VIRTUAL_NODE_NAME", "value": "mesh/${{ env.mesh_name }}/virtualNode/${{ env.virtual_node_name }}"},
                    {"name": "ENABLE_ENVOY_STATS_TAGS", "value": "1"},
                    {"name": "ENABLE_ENVOY_XRAY_TRACING", "value": "1"},
                    {"name": "APPMESH_PREVIEW", "value": "0"}
                  ],
                  "healthCheck": {
                    "command": ["CMD-SHELL", "curl -s http://localhost:9901/server_info | grep state | grep -q LIVE"],
                    "interval": 5,
                    "timeout": 2,
                    "retries": 3,
                    "startPeriod": 10
                  },
                  "logConfiguration": {
                    "logDriver": "awslogs",
                    "options": {
                      "awslogs-group": "${{ env.log_group_envoy }}",
                      "awslogs-region": "${{ env.aws_region }}",
                      "awslogs-stream-prefix": "envoy"
                    }
                  }
                },
                {
                  "name": "AppContainer",
                  "image": "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.aws_region }}.amazonaws.com/${{ env.ecr_repository_backend }}:latest",
                  "essential": true,
                  "workingDirectory": "/app",
                  "entryPoint": ["node"],
                  "command": ["dist/src/main.js"],
                  "portMappings": [{"containerPort": 3000, "protocol": "tcp"}],
                  "environment": [
                    {"name": "PORT", "value": "3000"},
                    {"name": "NODE_ENV", "value": "${{ env.services_env }}"},
                    {"name": "AWS_REGION", "value": "${{ env.aws_region }}"},
                    {"name": "APPMESH_VIRTUAL_NODE_NAME", "value": "mesh/${{ env.mesh_name }}/virtualNode/${{ env.virtual_node_name }}"}
                  ],
                  "secrets": [
                    {"name": "DATABASE_URL", "valueFrom": "'$db_connection_arn'"},
                    {"name": "REDIS_URL", "valueFrom": "${{ steps.secrets.outputs.redis_connection_arn }}"},
                    {"name": "JWT_SECRET", "valueFrom": "${{ steps.secrets.outputs.jwt_secret_arn }}"}
                  ],
                  "environment": [
                    {"name": "COGNITO_CLIENT_USER_POOL_ID", "value": "${{ steps.cognito_config.outputs.client_user_pool_id }}"},
                    {"name": "COGNITO_CLIENT_CLIENT_ID", "value": "${{ steps.cognito_config.outputs.client_client_id }}"},
                    {"name": "COGNITO_ADMIN_USER_POOL_ID", "value": "${{ steps.cognito_config.outputs.admin_user_pool_id }}"},
                    {"name": "COGNITO_ADMIN_CLIENT_ID", "value": "${{ steps.cognito_config.outputs.admin_client_id }}"}
                  ],
                  "logConfiguration": {
                    "logDriver": "awslogs",
                    "options": {
                      "awslogs-group": "${{ env.log_group_app }}",
                      "awslogs-region": "${{ env.aws_region }}",
                      "awslogs-stream-prefix": "finefinds"
                    }
                  },
                  "healthCheck": {
                    "command": ["CMD-SHELL", "curl -f http://localhost:3000/health || exit 1"],
                    "interval": 30,
                    "timeout": 5,
                    "retries": 3,
                    "startPeriod": 60
                  }
                }
              ]
            }
            EOF
          }
          
          # Create task definition based on environment
          if ! create_task_definition "${{ env.services_env }}" "${{ env.task_def_family }}"; then
            exit 1
          fi
          
          # Validate task definition JSON
          if ! jq . task-definition.json > /dev/null 2>&1; then
            echo "::error::Invalid JSON in task definition"
            cat task-definition.json
            exit 1
          fi
          
          # Register task definition
          echo "Registering task definition..."
          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://task-definition.json \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)
            
          if [ $? -ne 0 ] || [ -z "$NEW_TASK_DEF_ARN" ]; then
            echo "::error::Failed to register task definition"
            echo "Task definition JSON:"
            cat task-definition.json
            exit 1
          fi
          
          echo "task_def_arn=$NEW_TASK_DEF_ARN" >> $GITHUB_OUTPUT
          
          # Clean up old task definitions
          cleanup_old_task_defs "${{ env.task_def_family }}"
          echo "::endgroup::"

      - name: Deploy to ECS
        id: deploy
        run: |
          echo "::group::Deploying to ECS"
          
          # Function to log with timestamp and level
          log() {
            local level=$1
            shift
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] [$level] $*"
          }
          
          log "INFO" "Starting deployment process..."
          log "INFO" "Environment: ${{ env.services_env }}"
          log "INFO" "Cluster: ${{ env.cluster_name }}"
          log "INFO" "Service: ${{ env.service_name }}"
          log "INFO" "Task Definition: ${{ steps.task_def.outputs.task_def_arn }}"
          
          # Function to check if service exists
          check_service_exists() {
            local cluster=$1
            local service=$2
            aws ecs describe-services \
              --cluster "$cluster" \
              --services "$service" \
              --query 'services[0].status' \
              --output text 2>/dev/null || echo "NONEXISTENT"
          }
          
          # Function to create service
          create_service() {
            local cluster=$1
            local service=$2
            local task_def=$3
            
            log "INFO" "Creating new ECS service..."
            aws ecs create-service \
              --cluster "$cluster" \
              --service-name "$service" \
              --task-definition "$task_def" \
              --desired-count 1 \
              --launch-type FARGATE \
              --service-registries "registryArn=arn:aws:servicediscovery:${{ env.aws_region }}:${{ secrets.AWS_ACCOUNT_ID }}:service/${{ env.services_env }}-service-discovery" || {
                log "ERROR" "Failed to create ECS service"
                return 1
              }
          }
          
          # Function to check container pull status
          check_container_pull_status() {
            local cluster=$1
            local service=$2
            local max_attempts=10
            local attempt=1
            
            while [ $attempt -le $max_attempts ]; do
              log "INFO" "Checking container pull status (attempt $attempt of $max_attempts)..."
              
              # Get the latest task ARN
              local task_arn=$(aws ecs list-tasks \
                --cluster "$cluster" \
                --service-name "$service" \
                --desired-status RUNNING \
                --query 'taskArns[0]' \
                --output text)
              
              if [ -z "$task_arn" ] || [ "$task_arn" == "None" ]; then
                log "WARNING" "No running tasks found. Waiting..."
                sleep 30
                attempt=$((attempt + 1))
                continue
              fi
              
              # Check task status
              local task_status=$(aws ecs describe-tasks \
                --cluster "$cluster" \
                --tasks "$task_arn" \
                --query 'tasks[0].lastStatus' \
                --output text)
              
              if [ "$task_status" == "RUNNING" ]; then
                log "INFO" "Container successfully pulled and running"
                return 0
              elif [ "$task_status" == "STOPPED" ]; then
                local stop_reason=$(aws ecs describe-tasks \
                  --cluster "$cluster" \
                  --tasks "$task_arn" \
                  --query 'tasks[0].stoppedReason' \
                  --output text)
                log "ERROR" "Container stopped: $stop_reason"
                return 1
              fi
              
              log "INFO" "Container status: $task_status. Waiting..."
              sleep 30
              attempt=$((attempt + 1))
            done
            
            log "ERROR" "Container pull timed out after $max_attempts attempts"
            return 1
          }
          
          # Check if service exists
          service_status=$(check_service_exists "${{ env.cluster_name }}" "${{ env.service_name }}")
          
          if [ "$service_status" == "NONEXISTENT" ]; then
            log "INFO" "Service does not exist. Creating new service..."
            if ! create_service "${{ env.cluster_name }}" "${{ env.service_name }}" "${{ steps.task_def.outputs.task_def_arn }}"; then
              exit 1
            fi
          else
            log "INFO" "Updating existing ECS service..."
            if ! aws ecs update-service \
              --cluster ${{ env.cluster_name }} \
              --service ${{ env.service_name }} \
              --task-definition ${{ steps.task_def.outputs.task_def_arn }}; then
              log "ERROR" "Failed to update ECS service"
              exit 1
            fi
          fi
          
          log "INFO" "Waiting for service to stabilize..."
          if ! aws ecs wait services-stable \
            --cluster ${{ env.cluster_name }} \
            --services ${{ env.service_name }}; then
            log "ERROR" "Service failed to stabilize"
            exit 1
          fi
          
          # Check container pull status
          if ! check_container_pull_status "${{ env.cluster_name }}" "${{ env.service_name }}"; then
            log "ERROR" "Container pull failed"
            exit 1
          fi
          
          log "INFO" "Deployment completed successfully"
          
          # Clean up temporary files
          log "INFO" "Cleaning up temporary files..."
          rm -f version.txt task-definition.json
          echo "::endgroup::"

  deploy-prod:
    needs: build-and-push
    if: ${{ !contains(github.event.head_commit.message, '[skip deploy]') && (github.ref == 'refs/heads/main' || github.event.pull_request.base.ref == 'main' || (github.event_name == 'workflow_dispatch' && inputs.environment == 'prod' && !inputs.skip_deploy)) }}
    runs-on: ubuntu-latest
    environment: prod
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download version file
        uses: actions/download-artifact@v4
        with:
          name: version
          
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ env.github_actions_role }}
          aws-region: ${{ env.aws_region }}
          role-duration-seconds: 3600
          
      - name: Get RDS Endpoint and Credentials
        id: rds_creds
        run: |
          echo "::group::Fetching RDS Connection Details"
          
          # Get RDS endpoint from AWS Systems Manager Parameter Store
          rds_endpoint=$(aws ssm get-parameter --name "/finefinds/${{ env.services_env }}/rds/endpoint" --query "Parameter.Value" --output text)
          if [ $? -ne 0 ]; then
            echo "::error::Failed to get RDS endpoint from Parameter Store"
            exit 1
          fi
          echo "RDS endpoint: $rds_endpoint"
          
          # Get database credentials from Secrets Manager
          db_creds=$(aws secretsmanager get-secret-value --secret-id "finefinds-${{ env.services_env }}-rds-connection" --query "SecretString" --output text)
          if [ $? -ne 0 ]; then
            echo "::error::Failed to get RDS credentials from Secrets Manager"
            exit 1
          fi
          
          # Parse credentials from JSON
          db_user=$(echo $db_creds | jq -r '.username')
          db_password=$(echo $db_creds | jq -r '.password')
          db_name=$(echo $db_creds | jq -r '.dbName')
          db_port=$(echo $db_creds | jq -r '.port')
          
          # Validate required fields
          if [ -z "$db_user" ] || [ -z "$db_password" ] || [ -z "$db_name" ] || [ -z "$db_port" ]; then
            echo "::error::Missing required database credentials"
            exit 1
          fi
          
          # Construct database URL
          database_url="postgresql://${db_user}:${db_password}@${rds_endpoint}:${db_port}/${db_name}"
          
          # Output database URL for task definition
          echo "database_url=$database_url" >> $GITHUB_OUTPUT
          
          echo "✓ Successfully retrieved RDS connection details"
          echo "::endgroup::"

      - name: Get Secret ARNs
        id: secrets
        run: |
          echo "::group::Fetching Secret ARNs"
          
          get_secret_arn() {
            local secret_name=$1
            local max_attempts=3
            local attempt=1
            local secret_arn=""
            
            while [ $attempt -le $max_attempts ]; do
              echo "Attempt $attempt of $max_attempts to get ARN for $secret_name"
              secret_arn=$(aws secretsmanager get-secret-value \
                --secret-id "$secret_name" \
                --query 'ARN' \
                --output text)
                
              if [ $? -eq 0 ] && [ ! -z "$secret_arn" ]; then
                echo "Successfully got ARN for $secret_name"
                echo "$secret_arn"
                return 0
              fi
              
              echo "Failed to get ARN for $secret_name. Retrying..."
              sleep 5
              attempt=$((attempt + 1))
            done
            
            echo "::error::Failed to get ARN for $secret_name after $max_attempts attempts"
            return 1
          }
          
          verify_secret_access() {
            local secret_name=$1
            local max_attempts=3
            local attempt=1
            
            while [ $attempt -le $max_attempts ]; do
              echo "Attempt $attempt of $max_attempts to verify access to secret: $secret_name"
              if aws secretsmanager describe-secret --secret-id "$secret_name" > /dev/null; then
                echo "Successfully verified access to secret: $secret_name"
                return 0
              fi
              
              echo "Failed to verify access to secret: $secret_name. Retrying..."
              sleep 5
              attempt=$((attempt + 1))
            done
            
            echo "::error::Failed to verify access to secret: $secret_name after $max_attempts attempts"
            return 1
          }
          
          # Get and verify all secret ARNs
          for secret in \
            "${{ env.db_connection_secret }}" \
            "${{ env.redis_connection_secret }}" \
            "${{ env.cognito_config_secret }}" \
            "${{ env.jwt_secret }}"; do
            
            secret_arn=$(get_secret_arn "$secret")
            if [ $? -ne 0 ]; then
              exit 1
            fi
            
            # Extract the base name of the secret for the output variable
            secret_base_name=$(echo "$secret" | sed 's/.*-//')
            echo "${secret_base_name}_arn<<EOF" >> $GITHUB_OUTPUT
            echo "$secret_arn" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            
            if ! verify_secret_access "$secret"; then
              exit 1
            fi
          done
          
          echo "✓ All secrets verified successfully"
          echo "::endgroup::"

      - name: Create CloudWatch Log Groups
        id: create_log_groups
        run: |
          echo "::group::Creating CloudWatch Log Groups"
          
          log() {
            local level=$1
            shift
            if ! aws iam get-role --role-name "$task_role" > /dev/null 2>&1; then
              echo "::error::Task role $task_role does not exist"
              exit 1
            fi
            local execution_role_arn=$(aws iam get-role --role-name "$execution_role" --query 'Role.Arn' --output text)
            local task_role_arn=$(aws iam get-role --role-name "$task_role" --query 'Role.Arn' --output text)
            if [ -z "$execution_role_arn" ] || [ -z "$task_role_arn" ]; then
              echo "::error::Failed to get role ARNs"
              exit 1
            fi
            echo "Using execution role: $execution_role_arn"
            echo "Using task role: $task_role_arn"
            echo "Getting secret ARNs..."
            DB_CONNECTION_ARN=$(aws secretsmanager get-secret-value --secret-id "${{ env.db_connection_secret }}" --query 'ARN' --output text)
            REDIS_CONNECTION_ARN=$(aws secretsmanager get-secret-value --secret-id "${{ env.redis_connection_secret }}" --query 'ARN' --output text)
            JWT_SECRET_ARN=$(aws secretsmanager get-secret-value --secret-id "${{ env.jwt_secret }}" --query 'ARN' --output text)
            COGNITO_CONFIG_ARN=$(aws secretsmanager get-secret-value --secret-id "${{ env.cognito_config_secret }}" --query 'ARN' --output text)
            echo '{
              "family": "'$task_def_family'",
              "networkMode": "awsvpc",
              "requiresCompatibilities": ["FARGATE"],
              "cpu": "256",
              "memory": "512",
              "executionRoleArn": "'$execution_role_arn'",
              "taskRoleArn": "'$task_role_arn'",
              "runtimePlatform": {
                "operatingSystemFamily": "LINUX",
                "cpuArchitecture": "X86_64"
              },
              "proxyConfiguration": {
                "type": "APPMESH",
                "containerName": "envoy",
                "properties": [
                  {"name": "IgnoredUID", "value": "1337"},
                  {"name": "ProxyIngressPort", "value": "15000"},
                  {"name": "ProxyEgressPort", "value": "15001"},
                  {"name": "AppPorts", "value": "3000"},
                  {"name": "EgressIgnoredIPs", "value": "169.254.170.2,169.254.169.254"}
                ]
              },
              "containerDefinitions": [
                {
                  "name": "envoy",
                  "image": "${{ env.ecr_repository_envoy }}:${{ env.ecr_envoy_image_tag }}",
                  "essential": true,
                  "user": "1337",
                  "environment": [
                    {"name": "APPMESH_VIRTUAL_NODE_NAME", "value": "mesh/${{ env.mesh_name }}/virtualNode/${{ env.virtual_node_name }}"},
                    {"name": "ENABLE_ENVOY_STATS_TAGS", "value": "1"},
                    {"name": "ENABLE_ENVOY_XRAY_TRACING", "value": "1"},
                    {"name": "APPMESH_PREVIEW", "value": "0"}
                  ],
                  "healthCheck": {
                    "command": ["CMD-SHELL", "curl -s http://localhost:9901/server_info | grep state | grep -q LIVE"],
                    "interval": 5,
                    "timeout": 2,
                    "retries": 3,
                    "startPeriod": 10
                  },
                  "logConfiguration": {
                    "logDriver": "awslogs",
                    "options": {
                      "awslogs-group": "${{ env.log_group_envoy }}",
                      "awslogs-region": "${{ env.AWS_REGION }}",
                      "awslogs-stream-prefix": "envoy"
                    }
                  }
                },
                {
                  "name": "AppContainer",
                  "image": "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ecr_repository_backend }}:latest",
                  "essential": true,
                  "workingDirectory": "/app",
                  "entryPoint": ["node"],
                  "command": ["dist/src/main.js"],
                  "portMappings": [{"containerPort": 3000, "protocol": "tcp"}],
                  "environment": [
                    {"name": "PORT", "value": "3000"},
                    {"name": "NODE_ENV", "value": "${{ env.services_env }}"},
                    {"name": "AWS_REGION", "value": "${{ env.AWS_REGION }}"},
                    {"name": "APPMESH_VIRTUAL_NODE_NAME", "value": "mesh/${{ env.mesh_name }}/virtualNode/${{ env.virtual_node_name }}"}
                  ],
                  "secrets": [
                    {"name": "DATABASE_URL", "valueFrom": "'$DB_CONNECTION_ARN'"},
                    {"name": "REDIS_URL", "valueFrom": "'$REDIS_CONNECTION_ARN'"},
                    {"name": "JWT_SECRET", "valueFrom": "'$JWT_SECRET_ARN'"},
                    {"name": "COGNITO_CLIENT_USER_POOL_ID", "valueFrom": "'$COGNITO_CONFIG_ARN':COGNITO_CLIENT_USER_POOL_ID::"},
                    {"name": "COGNITO_CLIENT_CLIENT_ID", "valueFrom": "'$COGNITO_CONFIG_ARN':COGNITO_CLIENT_CLIENT_ID::"},
                    {"name": "COGNITO_ADMIN_USER_POOL_ID", "valueFrom": "'$COGNITO_CONFIG_ARN':COGNITO_ADMIN_USER_POOL_ID::"},
                    {"name": "COGNITO_ADMIN_CLIENT_ID", "valueFrom": "'$COGNITO_CONFIG_ARN':COGNITO_ADMIN_CLIENT_ID::"}
                  ],
                  "logConfiguration": {
                    "logDriver": "awslogs",
                    "options": {
                      "awslogs-group": "${{ env.log_group_app }}",
                      "awslogs-region": "${{ env.AWS_REGION }}",
                      "awslogs-stream-prefix": "finefinds"
                    }
                  },
                  "healthCheck": {
                    "command": ["CMD-SHELL", "curl -f http://localhost:3000/health || exit 1"],
                    "interval": 30,
                    "timeout": 5,
                    "retries": 3,
                    "startPeriod": 60
                  }
                }
              ]
            }' > task-definition.json
          }
          
          # Create task definition based on environment
          create_task_definition "prod" "${{ env.task_def_family }}"
          
          # Register task definition
          echo "Registering task definition..."
          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file://task-definition.json --query 'taskDefinition.taskDefinitionArn' --output text)
          if [ -z "$NEW_TASK_DEF_ARN" ]; then
            echo "::error::Failed to register task definition"
            exit 1
          fi
          echo "task_def_arn=$NEW_TASK_DEF_ARN" >> $GITHUB_OUTPUT

      - name: Deploy to ECS
        run: |
          echo "Updating ECS service..."
          aws ecs update-service \
            --cluster ${{ env.cluster_name }} \
            --service ${{ env.service_name }} \
            --task-definition ${{ steps.task_def.outputs.task_def_arn }}
            
          echo "Waiting for service to stabilize..."
          aws ecs wait services-stable \
            --cluster ${{ env.cluster_name }} \
            --services ${{ env.service_name }}
            
          # Add health check after deployment
          echo "Performing health check..."
          max_attempts=30
          attempt=1
          while [ $attempt -le $max_attempts ]; do
            echo "Health check attempt $attempt of $max_attempts"
            if aws ecs describe-services \
              --cluster ${{ env.cluster_name }} \
              --services ${{ env.service_name }} \
              --query 'services[0].runningCount' \
              --output text | grep -q "1"; then
              echo "Service is healthy"
              break
            fi
            echo "Service not healthy yet. Waiting..."
            sleep 10
            attempt=$((attempt + 1))
          done
          
          if [ $attempt -gt $max_attempts ]; then
            echo "::error::Service failed to become healthy after $max_attempts attempts"
            exit 1
          fi
          
          echo "Deployment completed successfully"

  notify:
    needs: [deploy-sandbox, deploy-dev, deploy-qa, deploy-staging, deploy-prod]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Slack Notification (Success)
        if: success()
        uses: slackapi/slack-github-action@v2.1.0
        with:
          webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
          webhook-type: webhook-trigger
          payload: |
            {
              "channel": "${{ secrets.SLACK_CHANNEL }}",
              "attachments": [
                {
                  "color": "#36a64f",
                  "pretext": ":white_check_mark: *Backend Services Deployment Succeeded*",
                  "fields": [
                    { "title": "Environment", "value": "${{ env.SERVICES_ENV }}", "short": true },
                    { "title": "Branch", "value": "${{ github.ref_name }}", "short": true },
                    { "title": "Actor", "value": "${{ github.actor }}", "short": true },
                    { "title": "Commit", "value": "${{ github.sha }}", "short": false },
                    { "title": "Task Definition", "value": "${{ needs.deploy-dev.outputs.task_def_arn || needs.deploy-qa.outputs.task_def_arn || needs.deploy-staging.outputs.task_def_arn || needs.deploy-prod.outputs.task_def_arn || 'N/A' }}", "short": false }
                  ],
                  "actions": [
                    {
                      "type": "button",
                      "text": "View Workflow",
                      "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                    }
                  ]
                }
              ]
            }

      - name: Slack Notification (Failure)
        if: failure()
        uses: slackapi/slack-github-action@v2.1.0
        with:
          webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
          webhook-type: webhook-trigger
          payload: |
            {
              "channel": "${{ secrets.SLACK_CHANNEL }}",
              "attachments": [
                {
                  "color": "#ff0000",
                  "pretext": ":x: *Backend Services Deployment Failed*",
                  "fields": [
                    { "title": "Environment", "value": "${{ env.SERVICES_ENV }}", "short": true },
                    { "title": "Branch", "value": "${{ github.ref_name }}", "short": true },
                    { "title": "Actor", "value": "${{ github.actor }}", "short": true },
                    { "title": "Commit", "value": "${{ github.sha }}", "short": false },
                    { "title": "Failed Job", "value": "${{ needs.deploy-sandbox.result == 'failure' && 'deploy-sandbox' || needs.deploy-dev.result == 'failure' && 'deploy-dev' || needs.deploy-qa.result == 'failure' && 'deploy-qa' || needs.deploy-staging.result == 'failure' && 'deploy-staging' || needs.deploy-prod.result == 'failure' && 'deploy-prod' || 'None' }}", "short": false }
                  ],
                  "actions": [
                    {
                      "type": "button",
                      "text": "View Workflow",
                      "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                    }
                  ]
                }
              ]
            } 