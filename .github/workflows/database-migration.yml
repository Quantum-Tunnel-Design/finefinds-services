name: Database Migration

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to run migration on'
        required: true
        type: choice
        options:
          - dev
          - qa
          - staging
          - prod
      version:
        description: 'Docker image tag to use for migration'
        required: true
        type: string
        default: 'latest'

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY_BACKEND: finefinds-services-${{ inputs.environment }}
  CLUSTER_NAME: finefinds-${{ inputs.environment }}-cluster
  TASK_DEFINITION: finefinds-backend-migration-${{ inputs.environment }}

jobs:
  migrate:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    permissions:
      id-token: write
      contents: read
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-services-${{ github.ref_name == 'main' && 'prod' || github.ref_name }}
          aws-region: ${{ env.AWS_REGION }}
          role-duration-seconds: 3600
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Get subnet IDs
        id: get-subnets
        run: |
          SUBNET_IDS=$(aws cloudformation describe-stacks \
            --stack-name FineFinds-${{ inputs.environment }} \
            --query "Stacks[0].Outputs[?ExportName=='finefinds-${{ inputs.environment }}-migration-task-subnet-ids'].OutputValue" \
            --output text)
          echo "subnet_ids=$SUBNET_IDS" >> $GITHUB_OUTPUT

      - name: Get security group ID
        id: get-sg
        run: |
          SG_ID=$(aws cloudformation describe-stacks \
            --stack-name FineFinds-${{ inputs.environment }} \
            --query "Stacks[0].Outputs[?ExportName=='finefinds-${{ inputs.environment }}-migration-task-sg-id'].OutputValue" \
            --output text)
          echo "sg_id=$SG_ID" >> $GITHUB_OUTPUT
          
      - name: Run database migration
        id: migration
        run: |
          # Generate task definition
          echo '{
            "family": "'"${{ env.TASK_DEFINITION }}"'",
            "networkMode": "awsvpc",
            "requiresCompatibilities": ["FARGATE"],
            "cpu": "256",
            "memory": "512",
            "executionRoleArn": "arn:aws:iam::'"${{ secrets.AWS_ACCOUNT_ID }}"':role/finefinds-${{ inputs.environment }}-ecs-execution-role",
            "taskRoleArn": "arn:aws:iam::'"${{ secrets.AWS_ACCOUNT_ID }}"':role/finefinds-${{ inputs.environment }}-ecs-task-role",
            "containerDefinitions": [
              {
                "name": "MigrationContainer",
                "image": "'"${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_BACKEND }}:${{ inputs.version }}"'",
                "essential": true,
                "workingDirectory": "/app",
                "command": ["npm", "run", "prisma:migrate"],
                "secrets": [
                  {
                    "name": "DB_NAME",
                    "valueFrom": "arn:aws:secretsmanager:us-east-1:'"${{ secrets.AWS_ACCOUNT_ID }}"':secret:finefinds-${{ inputs.environment }}-db-connection:SecretString:dbName::"
                  },
                  {
                    "name": "DB_USER",
                    "valueFrom": "arn:aws:secretsmanager:us-east-1:'"${{ secrets.AWS_ACCOUNT_ID }}"':secret:finefinds-${{ inputs.environment }}-db-connection:SecretString:username::"
                  },
                  {
                    "name": "DB_PASSWORD",
                    "valueFrom": "arn:aws:secretsmanager:us-east-1:'"${{ secrets.AWS_ACCOUNT_ID }}"':secret:finefinds-${{ inputs.environment }}-db-connection:SecretString:password::"
                  },
                  {
                    "name": "DB_PORT",
                    "valueFrom": "arn:aws:secretsmanager:us-east-1:'"${{ secrets.AWS_ACCOUNT_ID }}"':secret:finefinds-${{ inputs.environment }}-db-connection:SecretString:port::"
                  },
                  {
                    "name": "DATABASE_HOST",
                    "valueFrom": "arn:aws:secretsmanager:us-east-1:'"${{ secrets.AWS_ACCOUNT_ID }}"':secret:finefinds-${{ inputs.environment }}-db-connection:SecretString:host::"
                  }
                ],
                "environment": [
                  {
                    "name": "NODE_ENV",
                    "value": "'"${{ inputs.environment }}"'"
                  },
                  {
                    "name": "AWS_REGION",
                    "value": "'"${{ env.AWS_REGION }}"'"
                  },
                  {
                    "name": "DATABASE_URL",
                    "value": "postgresql://${DB_USER}:${DB_PASSWORD}@${DATABASE_HOST}:${DB_PORT}/${DB_NAME}?schema=public"
                  }
                ],
                "logConfiguration": {
                  "logDriver": "awslogs",
                  "options": {
                    "awslogs-group": "/finefinds/${{ inputs.environment }}/migration",
                    "awslogs-region": "'"${{ env.AWS_REGION }}"'",
                    "awslogs-stream-prefix": "ecs/MigrationContainer",
                    "awslogs-stream-name": "initial"
                  }
                }
              }
            ]
          }' > task-definition.json

          # Register task definition
          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://task-definition.json \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)

          # Run migration task
          TASK_ARN=$(aws ecs run-task \
            --cluster ${{ env.CLUSTER_NAME }} \
            --task-definition $NEW_TASK_DEF_ARN \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.get-subnets.outputs.subnet_ids }}],securityGroups=[${{ steps.get-sg.outputs.sg_id }}]}" \
            --launch-type FARGATE \
            --query 'tasks[0].taskArn' \
            --output text)
          
          echo "Waiting for migration task to complete..."
          aws ecs wait tasks-stopped \
            --cluster ${{ env.CLUSTER_NAME }} \
            --tasks $TASK_ARN
            
          # Check task status
          TASK_STATUS=$(aws ecs describe-tasks \
            --cluster ${{ env.CLUSTER_NAME }} \
            --tasks $TASK_ARN \
            --query 'tasks[0].lastStatus' \
            --output text)
            
          if [ "$TASK_STATUS" != "STOPPED" ]; then
            echo "Migration task failed with status: $TASK_STATUS"
            echo "Container logs:"
            # Wait for logs to be available
            sleep 10
            aws logs get-log-events \
              --log-group-name "/finefinds/${{ inputs.environment }}/migration" \
              --log-stream-name "ecs/MigrationContainer/initial" \
              --query 'events[*].message' \
              --output text || echo "No logs available yet"
            exit 1
          fi
          
          # Check container exit code
          EXIT_CODE=$(aws ecs describe-tasks \
            --cluster ${{ env.CLUSTER_NAME }} \
            --tasks $TASK_ARN \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
            
          if [ "$EXIT_CODE" != "0" ]; then
            echo "Migration failed with exit code: $EXIT_CODE"
            echo "Container logs:"
            # Wait for logs to be available
            sleep 10
            aws logs get-log-events \
              --log-group-name "/finefinds/${{ inputs.environment }}/migration" \
              --log-stream-name "ecs/MigrationContainer/initial" \
              --query 'events[*].message' \
              --output text || echo "No logs available yet"
            exit 1
          fi
            
      - name: Notify Slack
        uses: slackapi/slack-github-action@v2.1.0
        with:
          webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
          webhook-type: webhook-trigger
          payload: |
            {
              "channel": "${{ secrets.SLACK_CHANNEL }}",
              "attachments": [
                {
                  "color": "${{ job.status == 'success' && '#36a64f' || '#ff0000' }}",
                  "pretext": "${{ job.status == 'success' && ':white_check_mark: Database Migration Succeeded' || ':x: Database Migration Failed' }}",
                  "fields": [
                    { "title": "Environment", "value": "${{ inputs.environment }}", "short": true },
                    { "title": "Version", "value": "${{ inputs.version }}", "short": true },
                    { "title": "Actor", "value": "${{ github.actor }}", "short": true },
                    { "title": "Task Definition", "value": "${{ steps.migration.outputs.NEW_TASK_DEF_ARN }}", "short": false }
                  ],
                  "actions": [
                    {
                      "type": "button",
                      "text": "View Workflow",
                      "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                    }
                  ]
                }
              ]
            }
        if: always()